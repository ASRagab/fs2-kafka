Index.PACKAGES = {"fs2" : [], "fs2.kafka" : [{"name" : "fs2.kafka.Acks", "shortDescription" : "The available options for ProducerSettings#withAcks.Available options include:- Acks#Zero to not wait for any acknowledgement from the server,- Acks#One to only wait for acknowledgement from the leader node,- Acks#All to wait for acknowledgement from all in-sync replicas.", "object" : "fs2\/kafka\/Acks$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Acks.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Acks.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Acks.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Acks.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Acks.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Acks.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Acks.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Acks.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Acks.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Acks.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Acks.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Acks.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Acks.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Acks.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Acks.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Acks.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "All", "tail" : ": Acks", "member" : "fs2.kafka.Acks.All", "link" : "fs2\/kafka\/Acks$.html#All:fs2.kafka.Acks", "kind" : "val"}, {"label" : "One", "tail" : ": Acks", "member" : "fs2.kafka.Acks.One", "link" : "fs2\/kafka\/Acks$.html#One:fs2.kafka.Acks", "kind" : "val"}, {"label" : "Zero", "tail" : ": Acks", "member" : "fs2.kafka.Acks.Zero", "link" : "fs2\/kafka\/Acks$.html#Zero:fs2.kafka.Acks", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Acks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Acks$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Acks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Acks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Acks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Acks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Acks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Acks$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Acks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Acks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Acks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Acks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Acks$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Acks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Acks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Acks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Acks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Acks.html", "kind" : "class"}, {"name" : "fs2.kafka.AdminClientSettings", "shortDescription" : "AdminClientSettings contain settings necessary to create aKafkaAdminClient.", "object" : "fs2\/kafka\/AdminClientSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/AdminClientSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/AdminClientSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/AdminClientSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/AdminClientSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/AdminClientSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/AdminClientSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/AdminClientSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/AdminClientSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/AdminClientSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/AdminClientSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/AdminClientSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/AdminClientSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/AdminClientSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/AdminClientSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/AdminClientSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/AdminClientSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withCreateAdminClient", "tail" : "(createAdminClient: (Map[String, String]) => F[AdminClient]): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withCreateAdminClient", "link" : "fs2\/kafka\/AdminClientSettings.html#withCreateAdminClient(createAdminClient:Map[String,String]=>F[org.apache.kafka.clients.admin.AdminClient]):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "createAdminClient", "tail" : "(): F[AdminClient]", "member" : "fs2.kafka.AdminClientSettings.createAdminClient", "link" : "fs2\/kafka\/AdminClientSettings.html#createAdminClient:F[org.apache.kafka.clients.admin.AdminClient]", "kind" : "abstract def"}, {"label" : "withCloseTimeout", "tail" : "(closeTimeout: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withCloseTimeout", "link" : "fs2\/kafka\/AdminClientSettings.html#withCloseTimeout(closeTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "closeTimeout", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.AdminClientSettings.closeTimeout", "link" : "fs2\/kafka\/AdminClientSettings.html#closeTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: Map[String, String]): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withProperties", "link" : "fs2\/kafka\/AdminClientSettings.html#withProperties(properties:Map[String,String]):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: (String, String)*): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withProperties", "link" : "fs2\/kafka\/AdminClientSettings.html#withProperties(properties:(String,String)*):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withProperty", "tail" : "(key: String, value: String): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withProperty", "link" : "fs2\/kafka\/AdminClientSettings.html#withProperty(key:String,value:String):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withRetries", "tail" : "(retries: Int): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withRetries", "link" : "fs2\/kafka\/AdminClientSettings.html#withRetries(retries:Int):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withMetadataMaxAge", "tail" : "(metadataMaxAge: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withMetadataMaxAge", "link" : "fs2\/kafka\/AdminClientSettings.html#withMetadataMaxAge(metadataMaxAge:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withRequestTimeout", "tail" : "(requestTimeout: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withRequestTimeout", "link" : "fs2\/kafka\/AdminClientSettings.html#withRequestTimeout(requestTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withConnectionsMaxIdle", "tail" : "(connectionsMaxIdle: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withConnectionsMaxIdle", "link" : "fs2\/kafka\/AdminClientSettings.html#withConnectionsMaxIdle(connectionsMaxIdle:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withRetryBackoff", "tail" : "(retryBackoff: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withRetryBackoff", "link" : "fs2\/kafka\/AdminClientSettings.html#withRetryBackoff(retryBackoff:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withReconnectBackoffMax", "tail" : "(reconnectBackoffMax: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withReconnectBackoffMax", "link" : "fs2\/kafka\/AdminClientSettings.html#withReconnectBackoffMax(reconnectBackoffMax:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withReconnectBackoff", "tail" : "(reconnectBackoff: FiniteDuration): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withReconnectBackoff", "link" : "fs2\/kafka\/AdminClientSettings.html#withReconnectBackoff(reconnectBackoff:scala.concurrent.duration.FiniteDuration):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withClientId", "tail" : "(clientId: String): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withClientId", "link" : "fs2\/kafka\/AdminClientSettings.html#withClientId(clientId:String):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "withBootstrapServers", "tail" : "(bootstrapServers: String): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withBootstrapServers", "link" : "fs2\/kafka\/AdminClientSettings.html#withBootstrapServers(bootstrapServers:String):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "fs2.kafka.AdminClientSettings.properties", "link" : "fs2\/kafka\/AdminClientSettings.html#properties:Map[String,String]", "kind" : "abstract def"}, {"label" : "withBlocker", "tail" : "(blocker: Blocker): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.withBlocker", "link" : "fs2\/kafka\/AdminClientSettings.html#withBlocker(blocker:cats.effect.Blocker):fs2.kafka.AdminClientSettings[F]", "kind" : "abstract def"}, {"label" : "blocker", "tail" : "(): Option[Blocker]", "member" : "fs2.kafka.AdminClientSettings.blocker", "link" : "fs2\/kafka\/AdminClientSettings.html#blocker:Option[cats.effect.Blocker]", "kind" : "abstract def"}], "members_object" : [{"label" : "adminClientSettingsShow", "tail" : "(): Show[AdminClientSettings[F]]", "member" : "fs2.kafka.AdminClientSettings.adminClientSettingsShow", "link" : "fs2\/kafka\/AdminClientSettings$.html#adminClientSettingsShow[F[_]]:cats.Show[fs2.kafka.AdminClientSettings[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: Sync[F]): AdminClientSettings[F]", "member" : "fs2.kafka.AdminClientSettings.apply", "link" : "fs2\/kafka\/AdminClientSettings$.html#apply[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.AdminClientSettings[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/AdminClientSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/AdminClientSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/AdminClientSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/AdminClientSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/AdminClientSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/AdminClientSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/AdminClientSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AdminClientSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/AdminClientSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/AdminClientSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/AdminClientSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/AdminClientSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/AdminClientSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/AdminClientSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/AdminClientSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/AdminClientSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/AdminClientSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/AdminClientSettings.html", "kind" : "class"}, {"name" : "fs2.kafka.AutoOffsetReset", "shortDescription" : "The available options for ConsumerSettings#withAutoOffsetReset.Available options include:- AutoOffsetReset#Earliest to reset to the earliest offsets,- AutoOffsetReset#Latest to reset to the latest offsets,- AutoOffsetReset#None to fail if no offsets are available.", "object" : "fs2\/kafka\/AutoOffsetReset$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/AutoOffsetReset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/AutoOffsetReset.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/AutoOffsetReset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/AutoOffsetReset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/AutoOffsetReset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/AutoOffsetReset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/AutoOffsetReset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/AutoOffsetReset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/AutoOffsetReset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/AutoOffsetReset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/AutoOffsetReset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/AutoOffsetReset.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/AutoOffsetReset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/AutoOffsetReset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/AutoOffsetReset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/AutoOffsetReset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "None", "tail" : ": AutoOffsetReset", "member" : "fs2.kafka.AutoOffsetReset.None", "link" : "fs2\/kafka\/AutoOffsetReset$.html#None:fs2.kafka.AutoOffsetReset", "kind" : "val"}, {"label" : "Latest", "tail" : ": AutoOffsetReset", "member" : "fs2.kafka.AutoOffsetReset.Latest", "link" : "fs2\/kafka\/AutoOffsetReset$.html#Latest:fs2.kafka.AutoOffsetReset", "kind" : "val"}, {"label" : "Earliest", "tail" : ": AutoOffsetReset", "member" : "fs2.kafka.AutoOffsetReset.Earliest", "link" : "fs2\/kafka\/AutoOffsetReset$.html#Earliest:fs2.kafka.AutoOffsetReset", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/AutoOffsetReset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/AutoOffsetReset$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/AutoOffsetReset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/AutoOffsetReset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/AutoOffsetReset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/AutoOffsetReset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/AutoOffsetReset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/AutoOffsetReset$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/AutoOffsetReset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/AutoOffsetReset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/AutoOffsetReset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/AutoOffsetReset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/AutoOffsetReset$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/AutoOffsetReset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/AutoOffsetReset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/AutoOffsetReset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/AutoOffsetReset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/AutoOffsetReset.html", "kind" : "class"}, {"name" : "fs2.kafka.CommitRecovery", "shortDescription" : "CommitRecovery describes how to recover from exceptions raisedwhile trying to commit offsets.", "object" : "fs2\/kafka\/CommitRecovery$.html", "members_class" : [{"member" : "fs2.kafka.CommitRecovery#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommitRecovery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommitRecovery.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommitRecovery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommitRecovery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommitRecovery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommitRecovery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommitRecovery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommitRecovery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommitRecovery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommitRecovery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommitRecovery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommitRecovery.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommitRecovery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommitRecovery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommitRecovery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommitRecovery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recoverCommitWith", "tail" : "(offsets: Map[TopicPartition, OffsetAndMetadata], commit: F[Unit])(F: MonadError[F, Throwable], jitter: Jitter[F], timer: Timer[F]): (Throwable) => F[Unit]", "member" : "fs2.kafka.CommitRecovery.recoverCommitWith", "link" : "fs2\/kafka\/CommitRecovery.html#recoverCommitWith[F[_]](offsets:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata],commit:F[Unit])(implicitF:cats.MonadError[F,Throwable],implicitjitter:fs2.kafka.Jitter[F],implicittimer:cats.effect.Timer[F]):Throwable=>F[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "None", "tail" : ": CommitRecovery", "member" : "fs2.kafka.CommitRecovery.None", "link" : "fs2\/kafka\/CommitRecovery$.html#None:fs2.kafka.CommitRecovery", "kind" : "val"}, {"label" : "Default", "tail" : ": CommitRecovery", "member" : "fs2.kafka.CommitRecovery.Default", "link" : "fs2\/kafka\/CommitRecovery$.html#Default:fs2.kafka.CommitRecovery", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommitRecovery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommitRecovery$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommitRecovery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommitRecovery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommitRecovery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommitRecovery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommitRecovery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecovery$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommitRecovery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommitRecovery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommitRecovery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommitRecovery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommitRecovery$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommitRecovery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommitRecovery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommitRecovery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommitRecovery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommitRecovery.html", "kind" : "class"}, {"name" : "fs2.kafka.CommitRecoveryException", "shortDescription" : "CommitRecoveryException indicates that offset commit recovery wasattempted attempts times for offsets, but that it wasn't able tocomplete successfully.", "object" : "fs2\/kafka\/CommitRecoveryException$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/CommitRecoveryException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/CommitRecoveryException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitRecoveryException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/CommitRecoveryException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/CommitRecoveryException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/CommitRecoveryException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/CommitRecoveryException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/CommitRecoveryException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommitRecoveryException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommitRecoveryException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommitRecoveryException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommitRecoveryException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommitRecoveryException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommitRecoveryException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommitRecoveryException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommitRecoveryException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommitRecoveryException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommitRecoveryException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommitRecoveryException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommitRecoveryException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommitRecoveryException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommitRecoveryException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommitRecoveryException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(attempts: Int, lastException: Throwable, offsets: Map[TopicPartition, OffsetAndMetadata]): CommitRecoveryException", "member" : "fs2.kafka.CommitRecoveryException.apply", "link" : "fs2\/kafka\/CommitRecoveryException$.html#apply(attempts:Int,lastException:Throwable,offsets:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata]):fs2.kafka.CommitRecoveryException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommitRecoveryException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommitRecoveryException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommitRecoveryException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommitRecoveryException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommitRecoveryException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommitRecoveryException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommitRecoveryException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitRecoveryException$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommitRecoveryException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommitRecoveryException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommitRecoveryException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommitRecoveryException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommitRecoveryException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommitRecoveryException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommitRecoveryException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommitRecoveryException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommitRecoveryException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommitRecoveryException.html", "kind" : "class"}, {"name" : "fs2.kafka.CommittableConsumerRecord", "shortDescription" : "CommittableConsumerRecord is a Kafka record along with aninstance of CommittableOffset, which can be used committhe record offset to Kafka.", "object" : "fs2\/kafka\/CommittableConsumerRecord$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableConsumerRecord.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "offset", "tail" : "(): CommittableOffset[F]", "member" : "fs2.kafka.CommittableConsumerRecord.offset", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#offset:fs2.kafka.CommittableOffset[F]", "kind" : "abstract def"}, {"label" : "record", "tail" : "(): ConsumerRecord[K, V]", "member" : "fs2.kafka.CommittableConsumerRecord.record", "link" : "fs2\/kafka\/CommittableConsumerRecord.html#record:fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}], "members_object" : [{"label" : "committableConsumerRecordShow", "tail" : "(K: Show[K], V: Show[V]): Show[CommittableConsumerRecord[F, K, V]]", "member" : "fs2.kafka.CommittableConsumerRecord.committableConsumerRecordShow", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#committableConsumerRecordShow[F[_],K,V](implicitK:cats.Show[K],implicitV:cats.Show[V]):cats.Show[fs2.kafka.CommittableConsumerRecord[F,K,V]]", "kind" : "implicit def"}, {"label" : "unapply", "tail" : "(committable: CommittableConsumerRecord[F, K, V]): Some[(ConsumerRecord[K, V], CommittableOffset[F])]", "member" : "fs2.kafka.CommittableConsumerRecord.unapply", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#unapply[F[_],K,V](committable:fs2.kafka.CommittableConsumerRecord[F,K,V]):Some[(fs2.kafka.ConsumerRecord[K,V],fs2.kafka.CommittableOffset[F])]", "kind" : "def"}, {"label" : "apply", "tail" : "(record: ConsumerRecord[K, V], offset: CommittableOffset[F]): CommittableConsumerRecord[F, K, V]", "member" : "fs2.kafka.CommittableConsumerRecord.apply", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#apply[F[_],K,V](record:fs2.kafka.ConsumerRecord[K,V],offset:fs2.kafka.CommittableOffset[F]):fs2.kafka.CommittableConsumerRecord[F,K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableConsumerRecord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommittableConsumerRecord.html", "kind" : "class"}, {"name" : "fs2.kafka.CommittableOffset", "shortDescription" : "CommittableOffset represents an offsetAndMetadata for atopicPartition, along with the ability to commit that offsetto Kafka with commit.", "object" : "fs2\/kafka\/CommittableOffset$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableOffset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableOffset.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableOffset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableOffset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableOffset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableOffset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableOffset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableOffset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableOffset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableOffset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableOffset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableOffset.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableOffset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableOffset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableOffset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableOffset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "commit", "tail" : "(): F[Unit]", "member" : "fs2.kafka.CommittableOffset.commit", "link" : "fs2\/kafka\/CommittableOffset.html#commit:F[Unit]", "kind" : "abstract def"}, {"label" : "batch", "tail" : "(): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffset.batch", "link" : "fs2\/kafka\/CommittableOffset.html#batch:fs2.kafka.CommittableOffsetBatch[F]", "kind" : "abstract def"}, {"label" : "offsets", "tail" : "(): Map[TopicPartition, OffsetAndMetadata]", "member" : "fs2.kafka.CommittableOffset.offsets", "link" : "fs2\/kafka\/CommittableOffset.html#offsets:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata]", "kind" : "abstract def"}, {"label" : "consumerGroupId", "tail" : "(): Option[String]", "member" : "fs2.kafka.CommittableOffset.consumerGroupId", "link" : "fs2\/kafka\/CommittableOffset.html#consumerGroupId:Option[String]", "kind" : "abstract def"}, {"label" : "offsetAndMetadata", "tail" : "(): OffsetAndMetadata", "member" : "fs2.kafka.CommittableOffset.offsetAndMetadata", "link" : "fs2\/kafka\/CommittableOffset.html#offsetAndMetadata:org.apache.kafka.clients.consumer.OffsetAndMetadata", "kind" : "abstract def"}, {"label" : "topicPartition", "tail" : "(): TopicPartition", "member" : "fs2.kafka.CommittableOffset.topicPartition", "link" : "fs2\/kafka\/CommittableOffset.html#topicPartition:org.apache.kafka.common.TopicPartition", "kind" : "abstract def"}], "members_object" : [{"label" : "committableOffsetShow", "tail" : "(): Show[CommittableOffset[F]]", "member" : "fs2.kafka.CommittableOffset.committableOffsetShow", "link" : "fs2\/kafka\/CommittableOffset$.html#committableOffsetShow[F[_]]:cats.Show[fs2.kafka.CommittableOffset[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(topicPartition: TopicPartition, offsetAndMetadata: OffsetAndMetadata, consumerGroupId: Option[String], commit: (Map[TopicPartition, OffsetAndMetadata]) => F[Unit])(F: ApplicativeError[F, Throwable]): CommittableOffset[F]", "member" : "fs2.kafka.CommittableOffset.apply", "link" : "fs2\/kafka\/CommittableOffset$.html#apply[F[_]](topicPartition:org.apache.kafka.common.TopicPartition,offsetAndMetadata:org.apache.kafka.clients.consumer.OffsetAndMetadata,consumerGroupId:Option[String],commit:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata]=>F[Unit])(implicitF:cats.ApplicativeError[F,Throwable]):fs2.kafka.CommittableOffset[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableOffset$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableOffset$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableOffset$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableOffset$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableOffset$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableOffset$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableOffset$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffset$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableOffset$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableOffset$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableOffset$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableOffset$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableOffset$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableOffset$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableOffset$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableOffset$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableOffset$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommittableOffset.html", "kind" : "class"}, {"name" : "fs2.kafka.CommittableOffsetBatch", "shortDescription" : "CommittableOffsetBatch represents a batch of Kafka offsetswhich can be committed together using commit.", "object" : "fs2\/kafka\/CommittableOffsetBatch$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableOffsetBatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "commit", "tail" : "(): F[Unit]", "member" : "fs2.kafka.CommittableOffsetBatch.commit", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#commit:F[Unit]", "kind" : "abstract def"}, {"label" : "consumerGroupIdsMissing", "tail" : "(): Boolean", "member" : "fs2.kafka.CommittableOffsetBatch.consumerGroupIdsMissing", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#consumerGroupIdsMissing:Boolean", "kind" : "abstract def"}, {"label" : "consumerGroupIds", "tail" : "(): Set[String]", "member" : "fs2.kafka.CommittableOffsetBatch.consumerGroupIds", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#consumerGroupIds:Set[String]", "kind" : "abstract def"}, {"label" : "offsets", "tail" : "(): Map[TopicPartition, OffsetAndMetadata]", "member" : "fs2.kafka.CommittableOffsetBatch.offsets", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#offsets:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata]", "kind" : "abstract def"}, {"label" : "updated", "tail" : "(that: CommittableOffsetBatch[F]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.updated", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#updated(that:fs2.kafka.CommittableOffsetBatch[F]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "abstract def"}, {"label" : "updated", "tail" : "(that: CommittableOffset[F]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.updated", "link" : "fs2\/kafka\/CommittableOffsetBatch.html#updated(that:fs2.kafka.CommittableOffset[F]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "abstract def"}], "members_object" : [{"label" : "committableOffsetBatchShow", "tail" : "(): Show[CommittableOffsetBatch[F]]", "member" : "fs2.kafka.CommittableOffsetBatch.committableOffsetBatchShow", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#committableOffsetBatchShow[F[_]]:cats.Show[fs2.kafka.CommittableOffsetBatch[F]]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(F: Applicative[F]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.empty", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#empty[F[_]](implicitF:cats.Applicative[F]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "def"}, {"label" : "fromFoldableOption", "tail" : "(offsets: G[Option[CommittableOffset[F]]])(F: ApplicativeError[F, Throwable], G: Foldable[G]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.fromFoldableOption", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#fromFoldableOption[F[_],G[_]](offsets:G[Option[fs2.kafka.CommittableOffset[F]]])(implicitF:cats.ApplicativeError[F,Throwable],implicitG:cats.Foldable[G]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "def"}, {"label" : "fromFoldableMap", "tail" : "(ga: G[A])(f: (A) => CommittableOffset[F])(F: ApplicativeError[F, Throwable], G: Foldable[G]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.fromFoldableMap", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#fromFoldableMap[F[_],G[_],A](ga:G[A])(f:A=>fs2.kafka.CommittableOffset[F])(implicitF:cats.ApplicativeError[F,Throwable],implicitG:cats.Foldable[G]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "def"}, {"label" : "fromFoldable", "tail" : "(offsets: G[CommittableOffset[F]])(F: ApplicativeError[F, Throwable], G: Foldable[G]): CommittableOffsetBatch[F]", "member" : "fs2.kafka.CommittableOffsetBatch.fromFoldable", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#fromFoldable[F[_],G[_]](offsets:G[fs2.kafka.CommittableOffset[F]])(implicitF:cats.ApplicativeError[F,Throwable],implicitG:cats.Foldable[G]):fs2.kafka.CommittableOffsetBatch[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableOffsetBatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommittableOffsetBatch.html", "kind" : "class"}, {"name" : "fs2.kafka.CommittableProducerRecords", "shortDescription" : "CommittableProducerRecords represents zero or more ProducerRecordsand a CommittableOffset, used by TransactionalKafkaProducer toproduce the records and commit the offset atomically.CommittableProducerRecordss can be created using one of the following options.- CommittableProducerRecords#apply to produce zero or more recordswithin the same transaction as the offset is committed.- CommittableProducerRecords#one to produce exactly one record withinthe same transaction as the offset is committed.", "object" : "fs2\/kafka\/CommittableProducerRecords$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableProducerRecords.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableProducerRecords.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableProducerRecords.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableProducerRecords.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableProducerRecords.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableProducerRecords.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableProducerRecords.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableProducerRecords.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableProducerRecords.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableProducerRecords.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableProducerRecords.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableProducerRecords.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableProducerRecords.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableProducerRecords.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableProducerRecords.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableProducerRecords.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "offset", "tail" : "(): CommittableOffset[F]", "member" : "fs2.kafka.CommittableProducerRecords.offset", "link" : "fs2\/kafka\/CommittableProducerRecords.html#offset:fs2.kafka.CommittableOffset[F]", "kind" : "abstract def"}, {"label" : "records", "tail" : "(): Chunk[ProducerRecord[K, V]]", "member" : "fs2.kafka.CommittableProducerRecords.records", "link" : "fs2\/kafka\/CommittableProducerRecords.html#records:fs2.Chunk[fs2.kafka.ProducerRecord[K,V]]", "kind" : "abstract def"}], "members_object" : [{"label" : "committableProducerRecordsShow", "tail" : "(K: Show[K], V: Show[V]): Show[CommittableProducerRecords[F, K, V]]", "member" : "fs2.kafka.CommittableProducerRecords.committableProducerRecordsShow", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#committableProducerRecordsShow[F[_],K,V](implicitK:cats.Show[K],implicitV:cats.Show[V]):cats.Show[fs2.kafka.CommittableProducerRecords[F,K,V]]", "kind" : "implicit def"}, {"label" : "one", "tail" : "(record: ProducerRecord[K, V], offset: CommittableOffset[F]): CommittableProducerRecords[F, K, V]", "member" : "fs2.kafka.CommittableProducerRecords.one", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#one[F[_],K,V](record:fs2.kafka.ProducerRecord[K,V],offset:fs2.kafka.CommittableOffset[F]):fs2.kafka.CommittableProducerRecords[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(records: G[ProducerRecord[K, V]], offset: CommittableOffset[F])(G: Foldable[G]): CommittableProducerRecords[F, K, V]", "member" : "fs2.kafka.CommittableProducerRecords.apply", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#apply[F[_],G[+_],K,V](records:G[fs2.kafka.ProducerRecord[K,V]],offset:fs2.kafka.CommittableOffset[F])(implicitG:cats.Foldable[G]):fs2.kafka.CommittableProducerRecords[F,K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommittableProducerRecords$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommittableProducerRecords$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommittableProducerRecords.html", "kind" : "class"}, {"name" : "fs2.kafka.CommitTimeoutException", "shortDescription" : "CommitTimeoutException indicates that offset commit took longerthan the configured ConsumerSettings#commitTimeout.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/CommitTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/CommitTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/CommitTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/CommitTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/CommitTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/CommitTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/CommitTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/CommitTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/CommitTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/CommitTimeoutException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/CommitTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/CommitTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/CommitTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/CommitTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/CommitTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/CommitTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/CommitTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/CommitTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/CommitTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/CommitTimeoutException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/CommitTimeoutException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/CommitTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/CommitTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/CommitTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/CommitTimeoutException.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerGroupException", "shortDescription" : "Indicates that one or more of the following conditions occurredwhile attempting to commit offsets.- There were CommittableOffsets without a consumer group ID.- There were CommittableOffsets for multiple consumer group IDs.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/ConsumerGroupException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/ConsumerGroupException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerGroupException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/ConsumerGroupException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/ConsumerGroupException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/ConsumerGroupException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/ConsumerGroupException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/ConsumerGroupException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerGroupException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerGroupException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerGroupException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerGroupException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerGroupException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerGroupException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerGroupException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerGroupException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerGroupException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerGroupException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerGroupException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerGroupException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerGroupException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerGroupException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerGroupException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerGroupException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerGroupException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerGroupException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerGroupException.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerRecord", "shortDescription" : "ConsumerRecord represents a record which has beenconsumed from Kafka.", "object" : "fs2\/kafka\/ConsumerRecord$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerRecord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerRecord.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerRecord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerRecord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerRecord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerRecord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerRecord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerRecord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerRecord.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ConsumerRecord.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerRecord.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerRecord.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerRecord.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerRecord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerRecord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerRecord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withLeaderEpoch", "tail" : "(leaderEpoch: Int): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.withLeaderEpoch", "link" : "fs2\/kafka\/ConsumerRecord.html#withLeaderEpoch(leaderEpoch:Int):fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withSerializedValueSize", "tail" : "(serializedValueSize: Int): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.withSerializedValueSize", "link" : "fs2\/kafka\/ConsumerRecord.html#withSerializedValueSize(serializedValueSize:Int):fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withSerializedKeySize", "tail" : "(serializedKeySize: Int): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.withSerializedKeySize", "link" : "fs2\/kafka\/ConsumerRecord.html#withSerializedKeySize(serializedKeySize:Int):fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withTimestamp", "tail" : "(timestamp: Timestamp): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.withTimestamp", "link" : "fs2\/kafka\/ConsumerRecord.html#withTimestamp(timestamp:fs2.kafka.Timestamp):fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withHeaders", "tail" : "(headers: Headers): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.withHeaders", "link" : "fs2\/kafka\/ConsumerRecord.html#withHeaders(headers:fs2.kafka.Headers):fs2.kafka.ConsumerRecord[K,V]", "kind" : "abstract def"}, {"label" : "leaderEpoch", "tail" : "(): Option[Int]", "member" : "fs2.kafka.ConsumerRecord.leaderEpoch", "link" : "fs2\/kafka\/ConsumerRecord.html#leaderEpoch:Option[Int]", "kind" : "abstract def"}, {"label" : "serializedValueSize", "tail" : "(): Option[Int]", "member" : "fs2.kafka.ConsumerRecord.serializedValueSize", "link" : "fs2\/kafka\/ConsumerRecord.html#serializedValueSize:Option[Int]", "kind" : "abstract def"}, {"label" : "serializedKeySize", "tail" : "(): Option[Int]", "member" : "fs2.kafka.ConsumerRecord.serializedKeySize", "link" : "fs2\/kafka\/ConsumerRecord.html#serializedKeySize:Option[Int]", "kind" : "abstract def"}, {"label" : "timestamp", "tail" : "(): Timestamp", "member" : "fs2.kafka.ConsumerRecord.timestamp", "link" : "fs2\/kafka\/ConsumerRecord.html#timestamp:fs2.kafka.Timestamp", "kind" : "abstract def"}, {"label" : "headers", "tail" : "(): Headers", "member" : "fs2.kafka.ConsumerRecord.headers", "link" : "fs2\/kafka\/ConsumerRecord.html#headers:fs2.kafka.Headers", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): V", "member" : "fs2.kafka.ConsumerRecord.value", "link" : "fs2\/kafka\/ConsumerRecord.html#value:V", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): K", "member" : "fs2.kafka.ConsumerRecord.key", "link" : "fs2\/kafka\/ConsumerRecord.html#key:K", "kind" : "abstract def"}, {"label" : "offset", "tail" : "(): Long", "member" : "fs2.kafka.ConsumerRecord.offset", "link" : "fs2\/kafka\/ConsumerRecord.html#offset:Long", "kind" : "abstract def"}, {"label" : "partition", "tail" : "(): Int", "member" : "fs2.kafka.ConsumerRecord.partition", "link" : "fs2\/kafka\/ConsumerRecord.html#partition:Int", "kind" : "abstract def"}, {"label" : "topic", "tail" : "(): String", "member" : "fs2.kafka.ConsumerRecord.topic", "link" : "fs2\/kafka\/ConsumerRecord.html#topic:String", "kind" : "abstract def"}], "members_object" : [{"label" : "consumerRecordShow", "tail" : "(K: Show[K], V: Show[V]): Show[ConsumerRecord[K, V]]", "member" : "fs2.kafka.ConsumerRecord.consumerRecordShow", "link" : "fs2\/kafka\/ConsumerRecord$.html#consumerRecordShow[K,V](implicitK:cats.Show[K],implicitV:cats.Show[V]):cats.Show[fs2.kafka.ConsumerRecord[K,V]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(topic: String, partition: Int, offset: Long, key: K, value: V): ConsumerRecord[K, V]", "member" : "fs2.kafka.ConsumerRecord.apply", "link" : "fs2\/kafka\/ConsumerRecord$.html#apply[K,V](topic:String,partition:Int,offset:Long,key:K,value:V):fs2.kafka.ConsumerRecord[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerRecord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerRecord$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerRecord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerRecord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerRecord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerRecord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerRecord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerRecord$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerRecord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerRecord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ConsumerRecord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerRecord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerRecord$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerRecord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerRecord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerRecord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerRecord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerRecord.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerResource", "shortDescription" : "ConsumerResource provides support for inferring the key and valuetype from ConsumerSettings when using consumerResource with thefollowing syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.ConsumerResource.toString", "link" : "fs2\/kafka\/ConsumerResource.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: ConsumerSettings[F, K, V])(context: ContextShift[F], timer: Timer[F]): Resource[F, KafkaConsumer[F, K, V]]", "member" : "fs2.kafka.ConsumerResource.using", "link" : "fs2\/kafka\/ConsumerResource.html#using[K,V](settings:fs2.kafka.ConsumerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F],implicittimer:cats.effect.Timer[F]):cats.effect.Resource[F,fs2.kafka.KafkaConsumer[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/ConsumerResource.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/ConsumerResource.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/ConsumerResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/ConsumerResource.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerResource.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerSettings", "shortDescription" : "ConsumerSettings contain settings necessary to create aKafkaConsumer.", "object" : "fs2\/kafka\/ConsumerSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ConsumerSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withMaxPrefetchBatches", "tail" : "(maxPrefetchBatches: Int): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withMaxPrefetchBatches", "link" : "fs2\/kafka\/ConsumerSettings.html#withMaxPrefetchBatches(maxPrefetchBatches:Int):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "maxPrefetchBatches", "tail" : "(): Int", "member" : "fs2.kafka.ConsumerSettings.maxPrefetchBatches", "link" : "fs2\/kafka\/ConsumerSettings.html#maxPrefetchBatches:Int", "kind" : "abstract def"}, {"label" : "withRecordMetadata", "tail" : "(recordMetadata: (ConsumerRecord[K, V]) => String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withRecordMetadata", "link" : "fs2\/kafka\/ConsumerSettings.html#withRecordMetadata(recordMetadata:fs2.kafka.ConsumerRecord[K,V]=>String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "recordMetadata", "tail" : "(): (ConsumerRecord[K, V]) => String", "member" : "fs2.kafka.ConsumerSettings.recordMetadata", "link" : "fs2\/kafka\/ConsumerSettings.html#recordMetadata:fs2.kafka.ConsumerRecord[K,V]=>String", "kind" : "abstract def"}, {"label" : "withCreateConsumer", "tail" : "(createConsumer: (Map[String, String]) => F[KafkaByteConsumer]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withCreateConsumer", "link" : "fs2\/kafka\/ConsumerSettings.html#withCreateConsumer(createConsumer:Map[String,String]=>F[fs2.kafka.KafkaByteConsumer]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "createConsumer", "tail" : "(): F[KafkaByteConsumer]", "member" : "fs2.kafka.ConsumerSettings.createConsumer", "link" : "fs2\/kafka\/ConsumerSettings.html#createConsumer:F[fs2.kafka.KafkaByteConsumer]", "kind" : "abstract def"}, {"label" : "withCommitRecovery", "tail" : "(commitRecovery: CommitRecovery): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withCommitRecovery", "link" : "fs2\/kafka\/ConsumerSettings.html#withCommitRecovery(commitRecovery:fs2.kafka.CommitRecovery):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "commitRecovery", "tail" : "(): CommitRecovery", "member" : "fs2.kafka.ConsumerSettings.commitRecovery", "link" : "fs2\/kafka\/ConsumerSettings.html#commitRecovery:fs2.kafka.CommitRecovery", "kind" : "abstract def"}, {"label" : "withPollTimeout", "tail" : "(pollTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withPollTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withPollTimeout(pollTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "pollTimeout", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.ConsumerSettings.pollTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#pollTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withPollInterval", "tail" : "(pollInterval: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withPollInterval", "link" : "fs2\/kafka\/ConsumerSettings.html#withPollInterval(pollInterval:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "pollInterval", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.ConsumerSettings.pollInterval", "link" : "fs2\/kafka\/ConsumerSettings.html#pollInterval:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withCommitTimeout", "tail" : "(commitTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withCommitTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withCommitTimeout(commitTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "commitTimeout", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.ConsumerSettings.commitTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#commitTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withCloseTimeout", "tail" : "(closeTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withCloseTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withCloseTimeout(closeTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "closeTimeout", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.ConsumerSettings.closeTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#closeTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: Map[String, String]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withProperties", "link" : "fs2\/kafka\/ConsumerSettings.html#withProperties(properties:Map[String,String]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: (String, String)*): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withProperties", "link" : "fs2\/kafka\/ConsumerSettings.html#withProperties(properties:(String,String)*):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withProperty", "tail" : "(key: String, value: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withProperty", "link" : "fs2\/kafka\/ConsumerSettings.html#withProperty(key:String,value:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withClientRack", "tail" : "(clientRack: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withClientRack", "link" : "fs2\/kafka\/ConsumerSettings.html#withClientRack(clientRack:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withAllowAutoCreateTopics", "tail" : "(allowAutoCreateTopics: Boolean): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withAllowAutoCreateTopics", "link" : "fs2\/kafka\/ConsumerSettings.html#withAllowAutoCreateTopics(allowAutoCreateTopics:Boolean):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withIsolationLevel", "tail" : "(isolationLevel: IsolationLevel): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withIsolationLevel", "link" : "fs2\/kafka\/ConsumerSettings.html#withIsolationLevel(isolationLevel:fs2.kafka.IsolationLevel):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withDefaultApiTimeout", "tail" : "(defaultApiTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withDefaultApiTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withDefaultApiTimeout(defaultApiTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withRequestTimeout", "tail" : "(requestTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withRequestTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withRequestTimeout(requestTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withAutoCommitInterval", "tail" : "(autoCommitInterval: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withAutoCommitInterval", "link" : "fs2\/kafka\/ConsumerSettings.html#withAutoCommitInterval(autoCommitInterval:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withEnableAutoCommit", "tail" : "(enableAutoCommit: Boolean): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withEnableAutoCommit", "link" : "fs2\/kafka\/ConsumerSettings.html#withEnableAutoCommit(enableAutoCommit:Boolean):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withHeartbeatInterval", "tail" : "(heartbeatInterval: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withHeartbeatInterval", "link" : "fs2\/kafka\/ConsumerSettings.html#withHeartbeatInterval(heartbeatInterval:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withSessionTimeout", "tail" : "(sessionTimeout: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withSessionTimeout", "link" : "fs2\/kafka\/ConsumerSettings.html#withSessionTimeout(sessionTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withMaxPollInterval", "tail" : "(maxPollInterval: FiniteDuration): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withMaxPollInterval", "link" : "fs2\/kafka\/ConsumerSettings.html#withMaxPollInterval(maxPollInterval:scala.concurrent.duration.FiniteDuration):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withMaxPollRecords", "tail" : "(maxPollRecords: Int): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withMaxPollRecords", "link" : "fs2\/kafka\/ConsumerSettings.html#withMaxPollRecords(maxPollRecords:Int):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withGroupInstanceId", "tail" : "(groupInstanceId: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withGroupInstanceId", "link" : "fs2\/kafka\/ConsumerSettings.html#withGroupInstanceId(groupInstanceId:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withGroupId", "tail" : "(groupId: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withGroupId", "link" : "fs2\/kafka\/ConsumerSettings.html#withGroupId(groupId:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withClientId", "tail" : "(clientId: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withClientId", "link" : "fs2\/kafka\/ConsumerSettings.html#withClientId(clientId:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withAutoOffsetReset", "tail" : "(autoOffsetReset: AutoOffsetReset): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withAutoOffsetReset", "link" : "fs2\/kafka\/ConsumerSettings.html#withAutoOffsetReset(autoOffsetReset:fs2.kafka.AutoOffsetReset):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withBootstrapServers", "tail" : "(bootstrapServers: String): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withBootstrapServers", "link" : "fs2\/kafka\/ConsumerSettings.html#withBootstrapServers(bootstrapServers:String):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "fs2.kafka.ConsumerSettings.properties", "link" : "fs2\/kafka\/ConsumerSettings.html#properties:Map[String,String]", "kind" : "abstract def"}, {"label" : "withBlocker", "tail" : "(blocker: Blocker): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.withBlocker", "link" : "fs2\/kafka\/ConsumerSettings.html#withBlocker(blocker:cats.effect.Blocker):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "blocker", "tail" : "(): Option[Blocker]", "member" : "fs2.kafka.ConsumerSettings.blocker", "link" : "fs2\/kafka\/ConsumerSettings.html#blocker:Option[cats.effect.Blocker]", "kind" : "abstract def"}, {"label" : "valueDeserializer", "tail" : "(): F[Deserializer[F, V]]", "member" : "fs2.kafka.ConsumerSettings.valueDeserializer", "link" : "fs2\/kafka\/ConsumerSettings.html#valueDeserializer:F[fs2.kafka.Deserializer[F,V]]", "kind" : "abstract def"}, {"label" : "keyDeserializer", "tail" : "(): F[Deserializer[F, K]]", "member" : "fs2.kafka.ConsumerSettings.keyDeserializer", "link" : "fs2\/kafka\/ConsumerSettings.html#keyDeserializer:F[fs2.kafka.Deserializer[F,K]]", "kind" : "abstract def"}], "members_object" : [{"label" : "consumerSettingsShow", "tail" : "(): Show[ConsumerSettings[F, K, V]]", "member" : "fs2.kafka.ConsumerSettings.consumerSettingsShow", "link" : "fs2\/kafka\/ConsumerSettings$.html#consumerSettingsShow[F[_],K,V]:cats.Show[fs2.kafka.ConsumerSettings[F,K,V]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: Sync[F], keyDeserializer: RecordDeserializer[F, K], valueDeserializer: RecordDeserializer[F, V]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.apply", "link" : "fs2\/kafka\/ConsumerSettings$.html#apply[F[_],K,V](implicitF:cats.effect.Sync[F],implicitkeyDeserializer:fs2.kafka.RecordDeserializer[F,K],implicitvalueDeserializer:fs2.kafka.RecordDeserializer[F,V]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyDeserializer: RecordDeserializer[F, K], valueDeserializer: RecordDeserializer[F, V])(F: Sync[F]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.apply", "link" : "fs2\/kafka\/ConsumerSettings$.html#apply[F[_],K,V](keyDeserializer:fs2.kafka.RecordDeserializer[F,K],valueDeserializer:fs2.kafka.RecordDeserializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyDeserializer: Deserializer[F, K], valueDeserializer: RecordDeserializer[F, V])(F: Sync[F]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.apply", "link" : "fs2\/kafka\/ConsumerSettings$.html#apply[F[_],K,V](keyDeserializer:fs2.kafka.Deserializer[F,K],valueDeserializer:fs2.kafka.RecordDeserializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyDeserializer: RecordDeserializer[F, K], valueDeserializer: Deserializer[F, V])(F: Sync[F]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.apply", "link" : "fs2\/kafka\/ConsumerSettings$.html#apply[F[_],K,V](keyDeserializer:fs2.kafka.RecordDeserializer[F,K],valueDeserializer:fs2.kafka.Deserializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keyDeserializer: Deserializer[F, K], valueDeserializer: Deserializer[F, V])(F: Sync[F]): ConsumerSettings[F, K, V]", "member" : "fs2.kafka.ConsumerSettings.apply", "link" : "fs2\/kafka\/ConsumerSettings$.html#apply[F[_],K,V](keyDeserializer:fs2.kafka.Deserializer[F,K],valueDeserializer:fs2.kafka.Deserializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ConsumerSettings[F,K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ConsumerSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerSettings.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerShutdownException", "shortDescription" : "ConsumerShutdownException indicates that a request couldnot be completed because the consumer has already shutdown.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/ConsumerShutdownException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/ConsumerShutdownException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/ConsumerShutdownException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/ConsumerShutdownException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ConsumerShutdownException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ConsumerShutdownException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ConsumerShutdownException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ConsumerShutdownException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ConsumerShutdownException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ConsumerShutdownException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ConsumerShutdownException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerShutdownException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerShutdownException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ConsumerShutdownException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ConsumerShutdownException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ConsumerShutdownException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ConsumerShutdownException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ConsumerShutdownException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ConsumerShutdownException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ConsumerShutdownException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerShutdownException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerShutdownException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerShutdownException.html", "kind" : "class"}, {"name" : "fs2.kafka.ConsumerStream", "shortDescription" : "ConsumerStream provides support for inferring the key and valuetype from ConsumerSettings when using consumerStream with thefollowing syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.ConsumerStream.toString", "link" : "fs2\/kafka\/ConsumerStream.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: ConsumerSettings[F, K, V])(context: ContextShift[F], timer: Timer[F]): Stream[F, KafkaConsumer[F, K, V]]", "member" : "fs2.kafka.ConsumerStream.using", "link" : "fs2\/kafka\/ConsumerStream.html#using[K,V](settings:fs2.kafka.ConsumerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F],implicittimer:cats.effect.Timer[F]):fs2.Stream[F,fs2.kafka.KafkaConsumer[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/ConsumerStream.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/ConsumerStream.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ConsumerStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ConsumerStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/ConsumerStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/ConsumerStream.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ConsumerStream.html", "kind" : "class"}, {"name" : "fs2.kafka.DeserializationException", "shortDescription" : "Exception raised with Deserializer#failWith whendeserialization was unable to complete successfully.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/DeserializationException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/DeserializationException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/DeserializationException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/DeserializationException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/DeserializationException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/DeserializationException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/DeserializationException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/DeserializationException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/DeserializationException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/DeserializationException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/DeserializationException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/DeserializationException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/DeserializationException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/DeserializationException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/DeserializationException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/DeserializationException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/DeserializationException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/DeserializationException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/DeserializationException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/DeserializationException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/DeserializationException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/DeserializationException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/DeserializationException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/DeserializationException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/DeserializationException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/DeserializationException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/DeserializationException.html", "kind" : "class"}, {"name" : "fs2.kafka.Deserializer", "shortDescription" : "Functional composable Kafka key- and record deserializer withsupport for effect types.", "object" : "fs2\/kafka\/Deserializer$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Deserializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Deserializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Deserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Deserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Deserializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Deserializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Deserializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Deserializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Deserializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Deserializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Deserializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Deserializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Deserializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Deserializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Deserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Deserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "suspend", "tail" : "(): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.suspend", "link" : "fs2\/kafka\/Deserializer.html#suspend:fs2.kafka.Deserializer[F,A]", "kind" : "abstract def"}, {"label" : "option", "tail" : "(): Deserializer[F, Option[A]]", "member" : "fs2.kafka.Deserializer.option", "link" : "fs2\/kafka\/Deserializer.html#option:fs2.kafka.Deserializer[F,Option[A]]", "kind" : "abstract def"}, {"label" : "attempt", "tail" : "(): Deserializer[F, Either[Throwable, A]]", "member" : "fs2.kafka.Deserializer.attempt", "link" : "fs2\/kafka\/Deserializer.html#attempt:fs2.kafka.Deserializer[F,Either[Throwable,A]]", "kind" : "abstract def"}, {"label" : "product", "tail" : "(that: Deserializer[F, B]): Deserializer[F, (A, B)]", "member" : "fs2.kafka.Deserializer.product", "link" : "fs2\/kafka\/Deserializer.html#product[B](that:fs2.kafka.Deserializer[F,B]):fs2.kafka.Deserializer[F,(A,B)]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (A) => Deserializer[F, B]): Deserializer[F, B]", "member" : "fs2.kafka.Deserializer.flatMap", "link" : "fs2\/kafka\/Deserializer.html#flatMap[B](f:A=>fs2.kafka.Deserializer[F,B]):fs2.kafka.Deserializer[F,B]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): Deserializer[F, B]", "member" : "fs2.kafka.Deserializer.map", "link" : "fs2\/kafka\/Deserializer.html#map[B](f:A=>B):fs2.kafka.Deserializer[F,B]", "kind" : "abstract def"}, {"label" : "deserialize", "tail" : "(topic: String, headers: Headers, bytes: Array[Byte]): F[A]", "member" : "fs2.kafka.Deserializer.deserialize", "link" : "fs2\/kafka\/Deserializer.html#deserialize(topic:String,headers:fs2.kafka.Headers,bytes:Array[Byte]):F[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "uuid", "tail" : "(F: Sync[F]): Deserializer[F, UUID]", "member" : "fs2.kafka.Deserializer.uuid", "link" : "fs2\/kafka\/Deserializer$.html#uuid[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,java.util.UUID]", "kind" : "implicit def"}, {"label" : "unit", "tail" : "(F: Sync[F]): Deserializer[F, Unit]", "member" : "fs2.kafka.Deserializer.unit", "link" : "fs2\/kafka\/Deserializer$.html#unit[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Unit]", "kind" : "implicit def"}, {"label" : "string", "tail" : "(F: Sync[F]): Deserializer[F, String]", "member" : "fs2.kafka.Deserializer.string", "link" : "fs2\/kafka\/Deserializer$.html#string[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,String]", "kind" : "implicit def"}, {"label" : "short", "tail" : "(F: Sync[F]): Deserializer[F, Short]", "member" : "fs2.kafka.Deserializer.short", "link" : "fs2\/kafka\/Deserializer$.html#short[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Short]", "kind" : "implicit def"}, {"label" : "long", "tail" : "(F: Sync[F]): Deserializer[F, Long]", "member" : "fs2.kafka.Deserializer.long", "link" : "fs2\/kafka\/Deserializer$.html#long[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Long]", "kind" : "implicit def"}, {"label" : "int", "tail" : "(F: Sync[F]): Deserializer[F, Int]", "member" : "fs2.kafka.Deserializer.int", "link" : "fs2\/kafka\/Deserializer$.html#int[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Int]", "kind" : "implicit def"}, {"label" : "float", "tail" : "(F: Sync[F]): Deserializer[F, Float]", "member" : "fs2.kafka.Deserializer.float", "link" : "fs2\/kafka\/Deserializer$.html#float[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Float]", "kind" : "implicit def"}, {"label" : "double", "tail" : "(F: Sync[F]): Deserializer[F, Double]", "member" : "fs2.kafka.Deserializer.double", "link" : "fs2\/kafka\/Deserializer$.html#double[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Double]", "kind" : "implicit def"}, {"label" : "monadError", "tail" : "(F: Sync[F]): MonadError[[β$0$]Deserializer[F, β$0$], Throwable]", "member" : "fs2.kafka.Deserializer.monadError", "link" : "fs2\/kafka\/Deserializer$.html#monadError[F[_]](implicitF:cats.effect.Sync[F]):cats.MonadError[[β$0$]fs2.kafka.Deserializer[F,β$0$],Throwable]", "kind" : "implicit def"}, {"label" : "option", "tail" : "(deserializer: Deserializer[F, A]): Deserializer[F, Option[A]]", "member" : "fs2.kafka.Deserializer.option", "link" : "fs2\/kafka\/Deserializer$.html#option[F[_],A](implicitdeserializer:fs2.kafka.Deserializer[F,A]):fs2.kafka.Deserializer[F,Option[A]]", "kind" : "implicit def"}, {"label" : "identity", "tail" : "(F: Sync[F]): Deserializer[F, Array[Byte]]", "member" : "fs2.kafka.Deserializer.identity", "link" : "fs2\/kafka\/Deserializer$.html#identity[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Array[Byte]]", "kind" : "implicit def"}, {"label" : "uuid", "tail" : "(charset: Charset)(F: Sync[F]): Deserializer[F, UUID]", "member" : "fs2.kafka.Deserializer.uuid", "link" : "fs2\/kafka\/Deserializer$.html#uuid[F[_]](charset:java.nio.charset.Charset)(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,java.util.UUID]", "kind" : "def"}, {"label" : "string", "tail" : "(charset: Charset)(F: Sync[F]): Deserializer[F, String]", "member" : "fs2.kafka.Deserializer.string", "link" : "fs2\/kafka\/Deserializer$.html#string[F[_]](charset:java.nio.charset.Charset)(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,String]", "kind" : "def"}, {"label" : "topic", "tail" : "(f: PartialFunction[String, Deserializer[F, A]])(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.topic", "link" : "fs2\/kafka\/Deserializer$.html#topic[F[_],A](f:PartialFunction[String,fs2.kafka.Deserializer[F,A]])(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (Array[Byte]) => F[A])(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.lift", "link" : "fs2\/kafka\/Deserializer$.html#lift[F[_],A](f:Array[Byte]=>F[A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "instance", "tail" : "(f: (String, Headers, Array[Byte]) => F[A])(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.instance", "link" : "fs2\/kafka\/Deserializer$.html#instance[F[_],A](f:(String,fs2.kafka.Headers,Array[Byte])=>F[A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "headers", "tail" : "(f: (Headers) => Deserializer[F, A])(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.headers", "link" : "fs2\/kafka\/Deserializer$.html#headers[F[_],A](f:fs2.kafka.Headers=>fs2.kafka.Deserializer[F,A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "failWith", "tail" : "(message: String)(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.failWith", "link" : "fs2\/kafka\/Deserializer$.html#failWith[F[_],A](message:String)(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: Throwable)(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.fail", "link" : "fs2\/kafka\/Deserializer$.html#fail[F[_],A](e:Throwable)(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "delegate", "tail" : "(deserializer: KafkaDeserializer[A])(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.delegate", "link" : "fs2\/kafka\/Deserializer$.html#delegate[F[_],A](deserializer:fs2.kafka.KafkaDeserializer[A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "const", "tail" : "(a: A)(F: Sync[F]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.const", "link" : "fs2\/kafka\/Deserializer$.html#const[F[_],A](a:A)(implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Sync[F]): Deserializer[F, Array[Byte]]", "member" : "fs2.kafka.Deserializer.apply", "link" : "fs2\/kafka\/Deserializer$.html#apply[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Deserializer[F,Array[Byte]]", "kind" : "def"}, {"label" : "apply", "tail" : "(deserializer: Deserializer[F, A]): Deserializer[F, A]", "member" : "fs2.kafka.Deserializer.apply", "link" : "fs2\/kafka\/Deserializer$.html#apply[F[_],A](implicitdeserializer:fs2.kafka.Deserializer[F,A]):fs2.kafka.Deserializer[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Deserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Deserializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Deserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Deserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Deserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Deserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Deserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Deserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Deserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Deserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Deserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Deserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Deserializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Deserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Deserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Deserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Deserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Deserializer.html", "kind" : "class"}, {"name" : "fs2.kafka.Header", "shortDescription" : "Header represents a String key and Array[Byte] valuewhich can be included as part of Headers when creating aProducerRecord.", "object" : "fs2\/kafka\/Header$.html", "members_class" : [{"label" : "attemptAs", "tail" : "(deserializer: Attempt[A]): Either[Throwable, A]", "member" : "fs2.kafka.Header.attemptAs", "link" : "fs2\/kafka\/Header.html#attemptAs[A](implicitdeserializer:fs2.kafka.HeaderDeserializer.Attempt[A]):Either[Throwable,A]", "kind" : "final def"}, {"label" : "as", "tail" : "(deserializer: HeaderDeserializer[A]): A", "member" : "fs2.kafka.Header.as", "link" : "fs2\/kafka\/Header.html#as[A](implicitdeserializer:fs2.kafka.HeaderDeserializer[A]):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Header.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Header.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Header.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Header.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Header.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Header.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Header.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Header.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Header.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Header.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Header.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Header.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Header.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Header.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Header.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Header.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Array[Byte]", "member" : "fs2.kafka.Header.value", "link" : "fs2\/kafka\/Header.html#value():Array[Byte]", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): String", "member" : "fs2.kafka.Header.key", "link" : "fs2\/kafka\/Header.html#key():String", "kind" : "abstract def"}], "members_object" : [{"label" : "headerShow", "tail" : ": Show[Header]", "member" : "fs2.kafka.Header.headerShow", "link" : "fs2\/kafka\/Header$.html#headerShow:cats.Show[fs2.kafka.Header]", "kind" : "implicit val"}, {"label" : "unapply", "tail" : "(header: Header): Some[(String, Array[Byte])]", "member" : "fs2.kafka.Header.unapply", "link" : "fs2\/kafka\/Header$.html#unapply(header:fs2.kafka.Header):Some[(String,Array[Byte])]", "kind" : "def"}, {"label" : "apply", "tail" : "(key: String, value: V)(serializer: HeaderSerializer[V]): Header", "member" : "fs2.kafka.Header.apply", "link" : "fs2\/kafka\/Header$.html#apply[V](key:String,value:V)(implicitserializer:fs2.kafka.HeaderSerializer[V]):fs2.kafka.Header", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Header$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Header$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Header$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Header$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Header$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Header$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Header$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Header$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Header$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Header$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Header$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Header$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Header$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Header$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Header$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Header$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Header$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Header.html", "kind" : "class"}, {"name" : "fs2.kafka.HeaderDeserializer", "shortDescription" : "HeaderDeserializer is a functional deserializer for Kafka recordheader values.", "object" : "fs2\/kafka\/HeaderDeserializer$.html", "members_class" : [{"label" : "option", "tail" : "(): HeaderDeserializer[Option[A]]", "member" : "fs2.kafka.HeaderDeserializer.option", "link" : "fs2\/kafka\/HeaderDeserializer.html#option:fs2.kafka.HeaderDeserializer[Option[A]]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): Attempt[A]", "member" : "fs2.kafka.HeaderDeserializer.attempt", "link" : "fs2\/kafka\/HeaderDeserializer.html#attempt:fs2.kafka.HeaderDeserializer.Attempt[A]", "kind" : "final def"}, {"label" : "delay", "tail" : "(): HeaderDeserializer[Eval[A]]", "member" : "fs2.kafka.HeaderDeserializer.delay", "link" : "fs2\/kafka\/HeaderDeserializer.html#delay:fs2.kafka.HeaderDeserializer[cats.Eval[A]]", "kind" : "final def"}, {"label" : "product", "tail" : "(that: HeaderDeserializer[B]): HeaderDeserializer[(A, B)]", "member" : "fs2.kafka.HeaderDeserializer.product", "link" : "fs2\/kafka\/HeaderDeserializer.html#product[B](that:fs2.kafka.HeaderDeserializer[B]):fs2.kafka.HeaderDeserializer[(A,B)]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => HeaderDeserializer[B]): HeaderDeserializer[B]", "member" : "fs2.kafka.HeaderDeserializer.flatMap", "link" : "fs2\/kafka\/HeaderDeserializer.html#flatMap[B](f:A=>fs2.kafka.HeaderDeserializer[B]):fs2.kafka.HeaderDeserializer[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): HeaderDeserializer[B]", "member" : "fs2.kafka.HeaderDeserializer.map", "link" : "fs2\/kafka\/HeaderDeserializer.html#map[B](f:A=>B):fs2.kafka.HeaderDeserializer[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/HeaderDeserializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/HeaderDeserializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/HeaderDeserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/HeaderDeserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/HeaderDeserializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/HeaderDeserializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/HeaderDeserializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/HeaderDeserializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/HeaderDeserializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/HeaderDeserializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/HeaderDeserializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/HeaderDeserializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/HeaderDeserializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/HeaderDeserializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/HeaderDeserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/HeaderDeserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deserialize", "tail" : "(bytes: Array[Byte]): A", "member" : "fs2.kafka.HeaderDeserializer.deserialize", "link" : "fs2\/kafka\/HeaderDeserializer.html#deserialize(bytes:Array[Byte]):A", "kind" : "abstract def"}], "members_object" : [{"label" : "uuid", "tail" : ": Attempt[UUID]", "member" : "fs2.kafka.HeaderDeserializer.uuid", "link" : "fs2\/kafka\/HeaderDeserializer$.html#uuid:fs2.kafka.HeaderDeserializer.Attempt[java.util.UUID]", "kind" : "implicit val"}, {"label" : "unit", "tail" : ": HeaderDeserializer[Unit]", "member" : "fs2.kafka.HeaderDeserializer.unit", "link" : "fs2\/kafka\/HeaderDeserializer$.html#unit:fs2.kafka.HeaderDeserializer[Unit]", "kind" : "implicit val"}, {"label" : "string", "tail" : ": HeaderDeserializer[String]", "member" : "fs2.kafka.HeaderDeserializer.string", "link" : "fs2\/kafka\/HeaderDeserializer$.html#string:fs2.kafka.HeaderDeserializer[String]", "kind" : "implicit val"}, {"label" : "short", "tail" : ": Attempt[Short]", "member" : "fs2.kafka.HeaderDeserializer.short", "link" : "fs2\/kafka\/HeaderDeserializer$.html#short:fs2.kafka.HeaderDeserializer.Attempt[Short]", "kind" : "implicit val"}, {"label" : "long", "tail" : ": Attempt[Long]", "member" : "fs2.kafka.HeaderDeserializer.long", "link" : "fs2\/kafka\/HeaderDeserializer$.html#long:fs2.kafka.HeaderDeserializer.Attempt[Long]", "kind" : "implicit val"}, {"label" : "int", "tail" : ": Attempt[Int]", "member" : "fs2.kafka.HeaderDeserializer.int", "link" : "fs2\/kafka\/HeaderDeserializer$.html#int:fs2.kafka.HeaderDeserializer.Attempt[Int]", "kind" : "implicit val"}, {"label" : "float", "tail" : ": Attempt[Float]", "member" : "fs2.kafka.HeaderDeserializer.float", "link" : "fs2\/kafka\/HeaderDeserializer$.html#float:fs2.kafka.HeaderDeserializer.Attempt[Float]", "kind" : "implicit val"}, {"label" : "double", "tail" : ": Attempt[Double]", "member" : "fs2.kafka.HeaderDeserializer.double", "link" : "fs2\/kafka\/HeaderDeserializer$.html#double:fs2.kafka.HeaderDeserializer.Attempt[Double]", "kind" : "implicit val"}, {"label" : "monad", "tail" : ": Monad[HeaderDeserializer]", "member" : "fs2.kafka.HeaderDeserializer.monad", "link" : "fs2\/kafka\/HeaderDeserializer$.html#monad:cats.Monad[fs2.kafka.HeaderDeserializer]", "kind" : "implicit val"}, {"label" : "option", "tail" : "(deserializer: HeaderDeserializer[A]): HeaderDeserializer[Option[A]]", "member" : "fs2.kafka.HeaderDeserializer.option", "link" : "fs2\/kafka\/HeaderDeserializer$.html#option[A](implicitdeserializer:fs2.kafka.HeaderDeserializer[A]):fs2.kafka.HeaderDeserializer[Option[A]]", "kind" : "implicit def"}, {"label" : "identity", "tail" : ": HeaderDeserializer[Array[Byte]]", "member" : "fs2.kafka.HeaderDeserializer.identity", "link" : "fs2\/kafka\/HeaderDeserializer$.html#identity:fs2.kafka.HeaderDeserializer[Array[Byte]]", "kind" : "implicit val"}, {"label" : "uuid", "tail" : "(charset: Charset): Attempt[UUID]", "member" : "fs2.kafka.HeaderDeserializer.uuid", "link" : "fs2\/kafka\/HeaderDeserializer$.html#uuid(charset:java.nio.charset.Charset):fs2.kafka.HeaderDeserializer.Attempt[java.util.UUID]", "kind" : "def"}, {"label" : "string", "tail" : "(charset: Charset): HeaderDeserializer[String]", "member" : "fs2.kafka.HeaderDeserializer.string", "link" : "fs2\/kafka\/HeaderDeserializer$.html#string(charset:java.nio.charset.Charset):fs2.kafka.HeaderDeserializer[String]", "kind" : "def"}, {"label" : "instance", "tail" : "(f: (Array[Byte]) => A): HeaderDeserializer[A]", "member" : "fs2.kafka.HeaderDeserializer.instance", "link" : "fs2\/kafka\/HeaderDeserializer$.html#instance[A](f:Array[Byte]=>A):fs2.kafka.HeaderDeserializer[A]", "kind" : "def"}, {"label" : "delegate", "tail" : "(deserializer: KafkaDeserializer[A]): HeaderDeserializer[A]", "member" : "fs2.kafka.HeaderDeserializer.delegate", "link" : "fs2\/kafka\/HeaderDeserializer$.html#delegate[A](deserializer:fs2.kafka.KafkaDeserializer[A]):fs2.kafka.HeaderDeserializer[A]", "kind" : "def"}, {"label" : "const", "tail" : "(a: A): HeaderDeserializer[A]", "member" : "fs2.kafka.HeaderDeserializer.const", "link" : "fs2\/kafka\/HeaderDeserializer$.html#const[A](a:A):fs2.kafka.HeaderDeserializer[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(deserializer: Attempt[A]): Attempt[A]", "member" : "fs2.kafka.HeaderDeserializer.attempt", "link" : "fs2\/kafka\/HeaderDeserializer$.html#attempt[A](implicitdeserializer:fs2.kafka.HeaderDeserializer.Attempt[A]):fs2.kafka.HeaderDeserializer.Attempt[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(deserializer: HeaderDeserializer[A]): HeaderDeserializer[A]", "member" : "fs2.kafka.HeaderDeserializer.apply", "link" : "fs2\/kafka\/HeaderDeserializer$.html#apply[A](implicitdeserializer:fs2.kafka.HeaderDeserializer[A]):fs2.kafka.HeaderDeserializer[A]", "kind" : "def"}, {"label" : "Attempt", "tail" : "", "member" : "fs2.kafka.HeaderDeserializer.Attempt", "link" : "fs2\/kafka\/HeaderDeserializer$.html#Attempt[A]=fs2.kafka.HeaderDeserializer[Either[Throwable,A]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/HeaderDeserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/HeaderDeserializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/HeaderDeserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/HeaderDeserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/HeaderDeserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/HeaderDeserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/HeaderDeserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderDeserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/HeaderDeserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/HeaderDeserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/HeaderDeserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/HeaderDeserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/HeaderDeserializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/HeaderDeserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/HeaderDeserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/HeaderDeserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/HeaderDeserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/HeaderDeserializer.html", "kind" : "class"}, {"name" : "fs2.kafka.Headers", "shortDescription" : "Headers represent an immutable append-only collectionof Headers.", "object" : "fs2\/kafka\/Headers$.html", "members_class" : [{"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "fs2.kafka.Headers.nonEmpty", "link" : "fs2\/kafka\/Headers.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(key: String): Option[Header]", "member" : "fs2.kafka.Headers.apply", "link" : "fs2\/kafka\/Headers.html#apply(key:String):Option[fs2.kafka.Header]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Headers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Headers.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Headers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Headers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Headers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Headers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Headers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Headers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Headers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Headers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Headers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Headers.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Headers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Headers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Headers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Headers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "asJava", "tail" : "(): KafkaHeaders", "member" : "fs2.kafka.Headers.asJava", "link" : "fs2\/kafka\/Headers.html#asJava:fs2.kafka.KafkaHeaders", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "fs2.kafka.Headers.isEmpty", "link" : "fs2\/kafka\/Headers.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "toChain", "tail" : "(): Chain[Header]", "member" : "fs2.kafka.Headers.toChain", "link" : "fs2\/kafka\/Headers.html#toChain:cats.data.Chain[fs2.kafka.Header]", "kind" : "abstract def"}, {"label" : "concat", "tail" : "(that: Headers): Headers", "member" : "fs2.kafka.Headers.concat", "link" : "fs2\/kafka\/Headers.html#concat(that:fs2.kafka.Headers):fs2.kafka.Headers", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(key: String): Boolean", "member" : "fs2.kafka.Headers.exists", "link" : "fs2\/kafka\/Headers.html#exists(key:String):Boolean", "kind" : "abstract def"}, {"label" : "append", "tail" : "(key: String, value: V)(serializer: HeaderSerializer[V]): Headers", "member" : "fs2.kafka.Headers.append", "link" : "fs2\/kafka\/Headers.html#append[V](key:String,value:V)(implicitserializer:fs2.kafka.HeaderSerializer[V]):fs2.kafka.Headers", "kind" : "abstract def"}, {"label" : "append", "tail" : "(header: Header): Headers", "member" : "fs2.kafka.Headers.append", "link" : "fs2\/kafka\/Headers.html#append(header:fs2.kafka.Header):fs2.kafka.Headers", "kind" : "abstract def"}, {"label" : "withKey", "tail" : "(key: String): Option[Header]", "member" : "fs2.kafka.Headers.withKey", "link" : "fs2\/kafka\/Headers.html#withKey(key:String):Option[fs2.kafka.Header]", "kind" : "abstract def"}], "members_object" : [{"label" : "headersShow", "tail" : ": Show[Headers]", "member" : "fs2.kafka.Headers.headersShow", "link" : "fs2\/kafka\/Headers$.html#headersShow:cats.Show[fs2.kafka.Headers]", "kind" : "implicit val"}, {"label" : "empty", "tail" : ": Headers", "member" : "fs2.kafka.Headers.empty", "link" : "fs2\/kafka\/Headers$.html#empty:fs2.kafka.Headers", "kind" : "val"}, {"label" : "fromIterable", "tail" : "(headers: Iterable[Header]): Headers", "member" : "fs2.kafka.Headers.fromIterable", "link" : "fs2\/kafka\/Headers$.html#fromIterable(headers:Iterable[fs2.kafka.Header]):fs2.kafka.Headers", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(headers: Seq[Header]): Headers", "member" : "fs2.kafka.Headers.fromSeq", "link" : "fs2\/kafka\/Headers$.html#fromSeq(headers:Seq[fs2.kafka.Header]):fs2.kafka.Headers", "kind" : "def"}, {"label" : "fromChain", "tail" : "(headers: Chain[Header]): Headers", "member" : "fs2.kafka.Headers.fromChain", "link" : "fs2\/kafka\/Headers$.html#fromChain(headers:cats.data.Chain[fs2.kafka.Header]):fs2.kafka.Headers", "kind" : "def"}, {"label" : "apply", "tail" : "(headers: Header*): Headers", "member" : "fs2.kafka.Headers.apply", "link" : "fs2\/kafka\/Headers$.html#apply(headers:fs2.kafka.Header*):fs2.kafka.Headers", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Headers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Headers$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Headers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Headers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Headers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Headers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Headers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Headers$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Headers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Headers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Headers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Headers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Headers$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Headers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Headers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Headers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Headers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Headers.html", "kind" : "class"}, {"name" : "fs2.kafka.HeaderSerializer", "shortDescription" : "HeaderSerializer is a functional serializer for Kafka recordheader values.", "object" : "fs2\/kafka\/HeaderSerializer$.html", "members_class" : [{"label" : "option", "tail" : "(): HeaderSerializer[Option[A]]", "member" : "fs2.kafka.HeaderSerializer.option", "link" : "fs2\/kafka\/HeaderSerializer.html#option:fs2.kafka.HeaderSerializer[Option[A]]", "kind" : "final def"}, {"label" : "mapBytes", "tail" : "(f: (Array[Byte]) => Array[Byte]): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.mapBytes", "link" : "fs2\/kafka\/HeaderSerializer.html#mapBytes(f:Array[Byte]=>Array[Byte]):fs2.kafka.HeaderSerializer[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): HeaderSerializer[B]", "member" : "fs2.kafka.HeaderSerializer.contramap", "link" : "fs2\/kafka\/HeaderSerializer.html#contramap[B](f:B=>A):fs2.kafka.HeaderSerializer[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/HeaderSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/HeaderSerializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/HeaderSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/HeaderSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/HeaderSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/HeaderSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/HeaderSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/HeaderSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/HeaderSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/HeaderSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/HeaderSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/HeaderSerializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/HeaderSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/HeaderSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/HeaderSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/HeaderSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "serialize", "tail" : "(a: A): Array[Byte]", "member" : "fs2.kafka.HeaderSerializer.serialize", "link" : "fs2\/kafka\/HeaderSerializer.html#serialize(a:A):Array[Byte]", "kind" : "abstract def"}], "members_object" : [{"label" : "uuid", "tail" : ": HeaderSerializer[UUID]", "member" : "fs2.kafka.HeaderSerializer.uuid", "link" : "fs2\/kafka\/HeaderSerializer$.html#uuid:fs2.kafka.HeaderSerializer[java.util.UUID]", "kind" : "implicit val"}, {"label" : "unit", "tail" : ": HeaderSerializer[Unit]", "member" : "fs2.kafka.HeaderSerializer.unit", "link" : "fs2\/kafka\/HeaderSerializer$.html#unit:fs2.kafka.HeaderSerializer[Unit]", "kind" : "implicit val"}, {"label" : "string", "tail" : ": HeaderSerializer[String]", "member" : "fs2.kafka.HeaderSerializer.string", "link" : "fs2\/kafka\/HeaderSerializer$.html#string:fs2.kafka.HeaderSerializer[String]", "kind" : "implicit val"}, {"label" : "short", "tail" : ": HeaderSerializer[Short]", "member" : "fs2.kafka.HeaderSerializer.short", "link" : "fs2\/kafka\/HeaderSerializer$.html#short:fs2.kafka.HeaderSerializer[Short]", "kind" : "implicit val"}, {"label" : "long", "tail" : ": HeaderSerializer[Long]", "member" : "fs2.kafka.HeaderSerializer.long", "link" : "fs2\/kafka\/HeaderSerializer$.html#long:fs2.kafka.HeaderSerializer[Long]", "kind" : "implicit val"}, {"label" : "int", "tail" : ": HeaderSerializer[Int]", "member" : "fs2.kafka.HeaderSerializer.int", "link" : "fs2\/kafka\/HeaderSerializer$.html#int:fs2.kafka.HeaderSerializer[Int]", "kind" : "implicit val"}, {"label" : "float", "tail" : ": HeaderSerializer[Float]", "member" : "fs2.kafka.HeaderSerializer.float", "link" : "fs2\/kafka\/HeaderSerializer$.html#float:fs2.kafka.HeaderSerializer[Float]", "kind" : "implicit val"}, {"label" : "double", "tail" : ": HeaderSerializer[Double]", "member" : "fs2.kafka.HeaderSerializer.double", "link" : "fs2\/kafka\/HeaderSerializer$.html#double:fs2.kafka.HeaderSerializer[Double]", "kind" : "implicit val"}, {"label" : "contravariant", "tail" : ": Contravariant[HeaderSerializer]", "member" : "fs2.kafka.HeaderSerializer.contravariant", "link" : "fs2\/kafka\/HeaderSerializer$.html#contravariant:cats.Contravariant[fs2.kafka.HeaderSerializer]", "kind" : "implicit val"}, {"label" : "option", "tail" : "(serializer: HeaderSerializer[A]): HeaderSerializer[Option[A]]", "member" : "fs2.kafka.HeaderSerializer.option", "link" : "fs2\/kafka\/HeaderSerializer$.html#option[A](implicitserializer:fs2.kafka.HeaderSerializer[A]):fs2.kafka.HeaderSerializer[Option[A]]", "kind" : "implicit def"}, {"label" : "identity", "tail" : ": HeaderSerializer[Array[Byte]]", "member" : "fs2.kafka.HeaderSerializer.identity", "link" : "fs2\/kafka\/HeaderSerializer$.html#identity:fs2.kafka.HeaderSerializer[Array[Byte]]", "kind" : "implicit val"}, {"label" : "uuid", "tail" : "(charset: Charset): HeaderSerializer[UUID]", "member" : "fs2.kafka.HeaderSerializer.uuid", "link" : "fs2\/kafka\/HeaderSerializer$.html#uuid(charset:java.nio.charset.Charset):fs2.kafka.HeaderSerializer[java.util.UUID]", "kind" : "def"}, {"label" : "string", "tail" : "(charset: Charset): HeaderSerializer[String]", "member" : "fs2.kafka.HeaderSerializer.string", "link" : "fs2\/kafka\/HeaderSerializer$.html#string(charset:java.nio.charset.Charset):fs2.kafka.HeaderSerializer[String]", "kind" : "def"}, {"label" : "instance", "tail" : "(f: (A) => Array[Byte]): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.instance", "link" : "fs2\/kafka\/HeaderSerializer$.html#instance[A](f:A=>Array[Byte]):fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.empty", "link" : "fs2\/kafka\/HeaderSerializer$.html#empty[A]:fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "delegate", "tail" : "(serializer: KafkaSerializer[A]): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.delegate", "link" : "fs2\/kafka\/HeaderSerializer$.html#delegate[A](serializer:fs2.kafka.KafkaSerializer[A]):fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "const", "tail" : "(bytes: Array[Byte]): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.const", "link" : "fs2\/kafka\/HeaderSerializer$.html#const[A](bytes:Array[Byte]):fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "asNull", "tail" : "(): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.asNull", "link" : "fs2\/kafka\/HeaderSerializer$.html#asNull[A]:fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(serializer: HeaderSerializer[A]): HeaderSerializer[A]", "member" : "fs2.kafka.HeaderSerializer.apply", "link" : "fs2\/kafka\/HeaderSerializer$.html#apply[A](implicitserializer:fs2.kafka.HeaderSerializer[A]):fs2.kafka.HeaderSerializer[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/HeaderSerializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/HeaderSerializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/HeaderSerializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/HeaderSerializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/HeaderSerializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/HeaderSerializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/HeaderSerializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/HeaderSerializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/HeaderSerializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/HeaderSerializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/HeaderSerializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/HeaderSerializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/HeaderSerializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/HeaderSerializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/HeaderSerializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/HeaderSerializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/HeaderSerializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/HeaderSerializer.html", "kind" : "class"}, {"name" : "fs2.kafka.IsolationLevel", "shortDescription" : "The available options for ConsumerSettings#withIsolationLevel.Available options include:- IsolationLevel#ReadCommitted to only read committed records,- IsolationLevel#ReadUncommitted to also read uncommitted records.", "object" : "fs2\/kafka\/IsolationLevel$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/IsolationLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/IsolationLevel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/IsolationLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/IsolationLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/IsolationLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/IsolationLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/IsolationLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/IsolationLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/IsolationLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/IsolationLevel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/IsolationLevel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/IsolationLevel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/IsolationLevel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/IsolationLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/IsolationLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/IsolationLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ReadUncommitted", "tail" : ": IsolationLevel", "member" : "fs2.kafka.IsolationLevel.ReadUncommitted", "link" : "fs2\/kafka\/IsolationLevel$.html#ReadUncommitted:fs2.kafka.IsolationLevel", "kind" : "val"}, {"label" : "ReadCommitted", "tail" : ": IsolationLevel", "member" : "fs2.kafka.IsolationLevel.ReadCommitted", "link" : "fs2\/kafka\/IsolationLevel$.html#ReadCommitted:fs2.kafka.IsolationLevel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/IsolationLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/IsolationLevel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/IsolationLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/IsolationLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/IsolationLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/IsolationLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/IsolationLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/IsolationLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/IsolationLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/IsolationLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/IsolationLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/IsolationLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/IsolationLevel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/IsolationLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/IsolationLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/IsolationLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/IsolationLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/IsolationLevel.html", "kind" : "class"}, {"name" : "fs2.kafka.Jitter", "shortDescription" : "Jitter represents the ability to apply jitter to an existing valuen, effectively multiplying n with a pseudorandom value between 0and 1 (both inclusive, although implementation dependent).The default Jitter#default uses java.util.Random for pseudorandomvalues and always applies jitter with a value between 0 (inclusive)and 1 (exclusive).", "object" : "fs2\/kafka\/Jitter$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Jitter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Jitter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Jitter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Jitter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Jitter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Jitter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Jitter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Jitter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Jitter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Jitter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Jitter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Jitter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Jitter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Jitter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Jitter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Jitter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withJitter", "tail" : "(n: Double): F[Double]", "member" : "fs2.kafka.Jitter.withJitter", "link" : "fs2\/kafka\/Jitter.html#withJitter(n:Double):F[Double]", "kind" : "abstract def"}], "members_object" : [{"label" : "none", "tail" : "(F: Applicative[F]): Jitter[F]", "member" : "fs2.kafka.Jitter.none", "link" : "fs2\/kafka\/Jitter$.html#none[F[_]](implicitF:cats.Applicative[F]):fs2.kafka.Jitter[F]", "kind" : "def"}, {"label" : "default", "tail" : "(F: Sync[F]): F[Jitter[F]]", "member" : "fs2.kafka.Jitter.default", "link" : "fs2\/kafka\/Jitter$.html#default[F[_]](implicitF:cats.effect.Sync[F]):F[fs2.kafka.Jitter[F]]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Jitter[F]): Jitter[F]", "member" : "fs2.kafka.Jitter.apply", "link" : "fs2\/kafka\/Jitter$.html#apply[F[_]](implicitF:fs2.kafka.Jitter[F]):fs2.kafka.Jitter[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Jitter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Jitter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Jitter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Jitter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Jitter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Jitter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Jitter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Jitter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Jitter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Jitter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Jitter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Jitter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Jitter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Jitter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Jitter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Jitter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Jitter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Jitter.html", "kind" : "class"}, {"name" : "fs2.kafka.KafkaAdminClient", "shortDescription" : "KafkaAdminClient represents an admin client for Kafka, which is able todescribe queries about topics, consumer groups, offsets, and other entitiesrelated to Kafka.Use adminClientResource or adminClientStream to create an instance.", "object" : "fs2\/kafka\/KafkaAdminClient$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/KafkaAdminClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/KafkaAdminClient.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/KafkaAdminClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/KafkaAdminClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/KafkaAdminClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/KafkaAdminClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/KafkaAdminClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/KafkaAdminClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/KafkaAdminClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/KafkaAdminClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/KafkaAdminClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/KafkaAdminClient.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/KafkaAdminClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/KafkaAdminClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/KafkaAdminClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/KafkaAdminClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deleteConsumerGroupOffsets", "tail" : "(groupId: String, partitions: Set[TopicPartition]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.deleteConsumerGroupOffsets", "link" : "fs2\/kafka\/KafkaAdminClient.html#deleteConsumerGroupOffsets(groupId:String,partitions:Set[org.apache.kafka.common.TopicPartition]):F[Unit]", "kind" : "abstract def"}, {"label" : "alterConsumerGroupOffsets", "tail" : "(groupId: String, offsets: Map[TopicPartition, OffsetAndMetadata]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.alterConsumerGroupOffsets", "link" : "fs2\/kafka\/KafkaAdminClient.html#alterConsumerGroupOffsets(groupId:String,offsets:Map[org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata]):F[Unit]", "kind" : "abstract def"}, {"label" : "listTopics", "tail" : "(): ListTopics[F]", "member" : "fs2.kafka.KafkaAdminClient.listTopics", "link" : "fs2\/kafka\/KafkaAdminClient.html#listTopics:fs2.kafka.KafkaAdminClient.ListTopics[F]", "kind" : "abstract def"}, {"label" : "listConsumerGroups", "tail" : "(): ListConsumerGroups[F]", "member" : "fs2.kafka.KafkaAdminClient.listConsumerGroups", "link" : "fs2\/kafka\/KafkaAdminClient.html#listConsumerGroups:fs2.kafka.KafkaAdminClient.ListConsumerGroups[F]", "kind" : "abstract def"}, {"label" : "listConsumerGroupOffsets", "tail" : "(groupId: String): ListConsumerGroupOffsets[F]", "member" : "fs2.kafka.KafkaAdminClient.listConsumerGroupOffsets", "link" : "fs2\/kafka\/KafkaAdminClient.html#listConsumerGroupOffsets(groupId:String):fs2.kafka.KafkaAdminClient.ListConsumerGroupOffsets[F]", "kind" : "abstract def"}, {"label" : "describeAcls", "tail" : "(filter: AclBindingFilter): F[List[AclBinding]]", "member" : "fs2.kafka.KafkaAdminClient.describeAcls", "link" : "fs2\/kafka\/KafkaAdminClient.html#describeAcls(filter:org.apache.kafka.common.acl.AclBindingFilter):F[List[org.apache.kafka.common.acl.AclBinding]]", "kind" : "abstract def"}, {"label" : "describeTopics", "tail" : "(topics: G[String])(G: Foldable[G]): F[Map[String, TopicDescription]]", "member" : "fs2.kafka.KafkaAdminClient.describeTopics", "link" : "fs2\/kafka\/KafkaAdminClient.html#describeTopics[G[_]](topics:G[String])(implicitG:cats.Foldable[G]):F[Map[String,org.apache.kafka.clients.admin.TopicDescription]]", "kind" : "abstract def"}, {"label" : "describeConsumerGroups", "tail" : "(groupIds: G[String])(G: Foldable[G]): F[Map[String, ConsumerGroupDescription]]", "member" : "fs2.kafka.KafkaAdminClient.describeConsumerGroups", "link" : "fs2\/kafka\/KafkaAdminClient.html#describeConsumerGroups[G[_]](groupIds:G[String])(implicitG:cats.Foldable[G]):F[Map[String,org.apache.kafka.clients.admin.ConsumerGroupDescription]]", "kind" : "abstract def"}, {"label" : "describeConfigs", "tail" : "(resources: G[ConfigResource])(G: Foldable[G]): F[Map[ConfigResource, List[ConfigEntry]]]", "member" : "fs2.kafka.KafkaAdminClient.describeConfigs", "link" : "fs2\/kafka\/KafkaAdminClient.html#describeConfigs[G[_]](resources:G[org.apache.kafka.common.config.ConfigResource])(implicitG:cats.Foldable[G]):F[Map[org.apache.kafka.common.config.ConfigResource,List[org.apache.kafka.clients.admin.ConfigEntry]]]", "kind" : "abstract def"}, {"label" : "describeCluster", "tail" : "(): DescribeCluster[F]", "member" : "fs2.kafka.KafkaAdminClient.describeCluster", "link" : "fs2\/kafka\/KafkaAdminClient.html#describeCluster:fs2.kafka.KafkaAdminClient.DescribeCluster[F]", "kind" : "abstract def"}, {"label" : "deleteAcls", "tail" : "(filters: G[AclBindingFilter])(G: Foldable[G]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.deleteAcls", "link" : "fs2\/kafka\/KafkaAdminClient.html#deleteAcls[G[_]](filters:G[org.apache.kafka.common.acl.AclBindingFilter])(implicitG:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "deleteTopics", "tail" : "(topics: G[String])(G: Foldable[G]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.deleteTopics", "link" : "fs2\/kafka\/KafkaAdminClient.html#deleteTopics[G[_]](topics:G[String])(implicitG:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "deleteTopic", "tail" : "(topic: String): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.deleteTopic", "link" : "fs2\/kafka\/KafkaAdminClient.html#deleteTopic(topic:String):F[Unit]", "kind" : "abstract def"}, {"label" : "createAcls", "tail" : "(acls: G[AclBinding])(G: Foldable[G]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.createAcls", "link" : "fs2\/kafka\/KafkaAdminClient.html#createAcls[G[_]](acls:G[org.apache.kafka.common.acl.AclBinding])(implicitG:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "createTopics", "tail" : "(topics: G[NewTopic])(G: Foldable[G]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.createTopics", "link" : "fs2\/kafka\/KafkaAdminClient.html#createTopics[G[_]](topics:G[org.apache.kafka.clients.admin.NewTopic])(implicitG:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "createTopic", "tail" : "(topic: NewTopic): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.createTopic", "link" : "fs2\/kafka\/KafkaAdminClient.html#createTopic(topic:org.apache.kafka.clients.admin.NewTopic):F[Unit]", "kind" : "abstract def"}, {"label" : "createPartitions", "tail" : "(newPartitions: Map[String, NewPartitions]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.createPartitions", "link" : "fs2\/kafka\/KafkaAdminClient.html#createPartitions(newPartitions:Map[String,org.apache.kafka.clients.admin.NewPartitions]):F[Unit]", "kind" : "abstract def"}, {"label" : "alterConfigs", "tail" : "(configs: Map[ConfigResource, G[AlterConfigOp]])(G: Foldable[G]): F[Unit]", "member" : "fs2.kafka.KafkaAdminClient.alterConfigs", "link" : "fs2\/kafka\/KafkaAdminClient.html#alterConfigs[G[_]](configs:Map[org.apache.kafka.common.config.ConfigResource,G[org.apache.kafka.clients.admin.AlterConfigOp]])(implicitG:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "ListTopics", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.ListTopics", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ListTopics[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "ListTopicsIncludeInternal", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.ListTopicsIncludeInternal", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ListTopicsIncludeInternal[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "ListConsumerGroups", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.ListConsumerGroups", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ListConsumerGroups[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "ListConsumerGroupOffsets", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.ListConsumerGroupOffsets", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ListConsumerGroupOffsets[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "ListConsumerGroupOffsetsForPartitions", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.ListConsumerGroupOffsetsForPartitions", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ListConsumerGroupOffsetsForPartitions[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "DescribeCluster", "tail" : "", "member" : "fs2.kafka.KafkaAdminClient.DescribeCluster", "link" : "fs2\/kafka\/KafkaAdminClient$.html#DescribeCluster[F[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/KafkaAdminClient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/KafkaAdminClient$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/KafkaAdminClient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/KafkaAdminClient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/KafkaAdminClient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/KafkaAdminClient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/KafkaAdminClient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaAdminClient$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/KafkaAdminClient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/KafkaAdminClient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/KafkaAdminClient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/KafkaAdminClient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/KafkaAdminClient$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/KafkaAdminClient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/KafkaAdminClient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/KafkaAdminClient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/KafkaAdminClient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/KafkaAdminClient.html", "kind" : "class"}, {"name" : "fs2.kafka.KafkaConsumer", "shortDescription" : "KafkaConsumer represents a consumer of Kafka records, with theability to subscribe to topics, start a single top-level stream,and optionally control it via the provided fiber instance.The following top-level streams are provided.- stream provides a single stream of records, where the order  of records is guaranteed per topic-partition.- partitionedStream provides a stream with elements as streams  that continually request records for a single partition.", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/KafkaConsumer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/KafkaConsumer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/KafkaConsumer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/KafkaConsumer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/KafkaConsumer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/KafkaConsumer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/KafkaConsumer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaConsumer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaConsumer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaConsumer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/KafkaConsumer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/KafkaConsumer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/KafkaConsumer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/KafkaConsumer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/KafkaConsumer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/KafkaConsumer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/KafkaConsumer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/KafkaConsumer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/KafkaConsumer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fiber", "tail" : "(): Fiber[F, Unit]", "member" : "fs2.kafka.consumer.KafkaConsumerLifecycle.fiber", "link" : "fs2\/kafka\/KafkaConsumer.html#fiber:cats.effect.Fiber[F,Unit]", "kind" : "abstract def"}, {"label" : "metrics", "tail" : "(): F[Map[MetricName, Metric]]", "member" : "fs2.kafka.consumer.KafkaMetrics.metrics", "link" : "fs2\/kafka\/KafkaConsumer.html#metrics:F[Map[org.apache.kafka.common.MetricName,org.apache.kafka.common.Metric]]", "kind" : "abstract def"}, {"label" : "endOffsets", "tail" : "(partitions: Set[TopicPartition], timeout: FiniteDuration): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.endOffsets", "link" : "fs2\/kafka\/KafkaConsumer.html#endOffsets(partitions:Set[org.apache.kafka.common.TopicPartition],timeout:scala.concurrent.duration.FiniteDuration):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "endOffsets", "tail" : "(partitions: Set[TopicPartition]): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.endOffsets", "link" : "fs2\/kafka\/KafkaConsumer.html#endOffsets(partitions:Set[org.apache.kafka.common.TopicPartition]):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "beginningOffsets", "tail" : "(partitions: Set[TopicPartition], timeout: FiniteDuration): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.beginningOffsets", "link" : "fs2\/kafka\/KafkaConsumer.html#beginningOffsets(partitions:Set[org.apache.kafka.common.TopicPartition],timeout:scala.concurrent.duration.FiniteDuration):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "beginningOffsets", "tail" : "(partitions: Set[TopicPartition]): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.beginningOffsets", "link" : "fs2\/kafka\/KafkaConsumer.html#beginningOffsets(partitions:Set[org.apache.kafka.common.TopicPartition]):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "partitionsFor", "tail" : "(topic: String, timeout: FiniteDuration): F[List[PartitionInfo]]", "member" : "fs2.kafka.consumer.KafkaTopics.partitionsFor", "link" : "fs2\/kafka\/KafkaConsumer.html#partitionsFor(topic:String,timeout:scala.concurrent.duration.FiniteDuration):F[List[org.apache.kafka.common.PartitionInfo]]", "kind" : "abstract def"}, {"label" : "partitionsFor", "tail" : "(topic: String): F[List[PartitionInfo]]", "member" : "fs2.kafka.consumer.KafkaTopics.partitionsFor", "link" : "fs2\/kafka\/KafkaConsumer.html#partitionsFor(topic:String):F[List[org.apache.kafka.common.PartitionInfo]]", "kind" : "abstract def"}, {"label" : "unsubscribe", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.unsubscribe", "link" : "fs2\/kafka\/KafkaConsumer.html#unsubscribe:F[Unit]", "kind" : "abstract def"}, {"label" : "subscribe", "tail" : "(regex: Regex): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribe", "link" : "fs2\/kafka\/KafkaConsumer.html#subscribe(regex:scala.util.matching.Regex):F[Unit]", "kind" : "abstract def"}, {"label" : "subscribe", "tail" : "(topics: G[String])(arg0: Reducible[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribe", "link" : "fs2\/kafka\/KafkaConsumer.html#subscribe[G[_]](topics:G[String])(implicitevidence$1:cats.Reducible[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "subscribeTo", "tail" : "(firstTopic: String, remainingTopics: String*): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribeTo", "link" : "fs2\/kafka\/KafkaConsumer.html#subscribeTo(firstTopic:String,remainingTopics:String*):F[Unit]", "kind" : "abstract def"}, {"label" : "position", "tail" : "(partition: TopicPartition, timeout: FiniteDuration): F[Long]", "member" : "fs2.kafka.consumer.KafkaOffsets.position", "link" : "fs2\/kafka\/KafkaConsumer.html#position(partition:org.apache.kafka.common.TopicPartition,timeout:scala.concurrent.duration.FiniteDuration):F[Long]", "kind" : "abstract def"}, {"label" : "position", "tail" : "(partition: TopicPartition): F[Long]", "member" : "fs2.kafka.consumer.KafkaOffsets.position", "link" : "fs2\/kafka\/KafkaConsumer.html#position(partition:org.apache.kafka.common.TopicPartition):F[Long]", "kind" : "abstract def"}, {"label" : "seekToEnd", "tail" : "(partitions: G[TopicPartition])(arg0: Foldable[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToEnd", "link" : "fs2\/kafka\/KafkaConsumer.html#seekToEnd[G[_]](partitions:G[org.apache.kafka.common.TopicPartition])(implicitevidence$2:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "seekToEnd", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToEnd", "link" : "fs2\/kafka\/KafkaConsumer.html#seekToEnd:F[Unit]", "kind" : "abstract def"}, {"label" : "seekToBeginning", "tail" : "(partitions: G[TopicPartition])(arg0: Foldable[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToBeginning", "link" : "fs2\/kafka\/KafkaConsumer.html#seekToBeginning[G[_]](partitions:G[org.apache.kafka.common.TopicPartition])(implicitevidence$1:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "seekToBeginning", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToBeginning", "link" : "fs2\/kafka\/KafkaConsumer.html#seekToBeginning:F[Unit]", "kind" : "abstract def"}, {"label" : "seek", "tail" : "(partition: TopicPartition, offset: Long): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seek", "link" : "fs2\/kafka\/KafkaConsumer.html#seek(partition:org.apache.kafka.common.TopicPartition,offset:Long):F[Unit]", "kind" : "abstract def"}, {"label" : "assign", "tail" : "(topic: String): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/KafkaConsumer.html#assign(topic:String):F[Unit]", "kind" : "abstract def"}, {"label" : "assign", "tail" : "(topic: String, partitions: NonEmptySet[Int]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/KafkaConsumer.html#assign(topic:String,partitions:cats.data.NonEmptySet[Int]):F[Unit]", "kind" : "abstract def"}, {"label" : "assign", "tail" : "(partitions: NonEmptySet[TopicPartition]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/KafkaConsumer.html#assign(partitions:cats.data.NonEmptySet[org.apache.kafka.common.TopicPartition]):F[Unit]", "kind" : "abstract def"}, {"label" : "assignmentStream", "tail" : "(): Stream[F, SortedSet[TopicPartition]]", "member" : "fs2.kafka.consumer.KafkaAssignment.assignmentStream", "link" : "fs2\/kafka\/KafkaConsumer.html#assignmentStream:fs2.Stream[F,scala.collection.immutable.SortedSet[org.apache.kafka.common.TopicPartition]]", "kind" : "abstract def"}, {"label" : "assignment", "tail" : "(): F[SortedSet[TopicPartition]]", "member" : "fs2.kafka.consumer.KafkaAssignment.assignment", "link" : "fs2\/kafka\/KafkaConsumer.html#assignment:F[scala.collection.immutable.SortedSet[org.apache.kafka.common.TopicPartition]]", "kind" : "abstract def"}, {"label" : "partitionsMapStream", "tail" : "(): Stream[F, Map[TopicPartition, Stream[F, CommittableConsumerRecord[F, K, V]]]]", "member" : "fs2.kafka.consumer.KafkaConsume.partitionsMapStream", "link" : "fs2\/kafka\/KafkaConsumer.html#partitionsMapStream:fs2.Stream[F,Map[org.apache.kafka.common.TopicPartition,fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]]]", "kind" : "abstract def"}, {"label" : "partitionedStream", "tail" : "(): Stream[F, Stream[F, CommittableConsumerRecord[F, K, V]]]", "member" : "fs2.kafka.consumer.KafkaConsume.partitionedStream", "link" : "fs2\/kafka\/KafkaConsumer.html#partitionedStream:fs2.Stream[F,fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]]", "kind" : "abstract def"}, {"label" : "stream", "tail" : "(): Stream[F, CommittableConsumerRecord[F, K, V]]", "member" : "fs2.kafka.consumer.KafkaConsume.stream", "link" : "fs2\/kafka\/KafkaConsumer.html#stream:fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]", "kind" : "abstract def"}], "class" : "fs2\/kafka\/KafkaConsumer.html", "kind" : "class"}, {"name" : "fs2.kafka.KafkaProducer", "shortDescription" : "KafkaProducer represents a producer of Kafka records, with theability to produce ProducerRecords using produce.", "object" : "fs2\/kafka\/KafkaProducer$.html", "members_class" : [{"member" : "fs2.kafka.KafkaProducer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/KafkaProducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/KafkaProducer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/KafkaProducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/KafkaProducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/KafkaProducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/KafkaProducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/KafkaProducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/KafkaProducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/KafkaProducer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/KafkaProducer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/KafkaProducer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/KafkaProducer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/KafkaProducer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/KafkaProducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/KafkaProducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/KafkaProducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "produce", "tail" : "(records: ProducerRecords[K, V, P]): F[F[ProducerResult[K, V, P]]]", "member" : "fs2.kafka.KafkaProducer.produce", "link" : "fs2\/kafka\/KafkaProducer.html#produce[P](records:fs2.kafka.ProducerRecords[K,V,P]):F[F[fs2.kafka.ProducerResult[K,V,P]]]", "kind" : "abstract def"}], "members_object" : [{"label" : "Metrics", "tail" : "", "member" : "fs2.kafka.KafkaProducer.Metrics", "link" : "fs2\/kafka\/KafkaProducer$.html#Metrics[F[_],K,V]extendsKafkaProducer[F,K,V]", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/KafkaProducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/KafkaProducer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/KafkaProducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/KafkaProducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/KafkaProducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/KafkaProducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/KafkaProducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/KafkaProducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/KafkaProducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/KafkaProducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/KafkaProducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/KafkaProducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/KafkaProducer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/KafkaProducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/KafkaProducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/KafkaProducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/KafkaProducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/KafkaProducer.html", "kind" : "class"}, {"name" : "fs2.kafka.NotSubscribedException", "shortDescription" : "NotSubscribedException indicates that a Stream was started inKafkaConsumer even though the consumer had not been subscribedto any topics before starting.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/NotSubscribedException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/NotSubscribedException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/NotSubscribedException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/NotSubscribedException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/NotSubscribedException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/NotSubscribedException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/NotSubscribedException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/NotSubscribedException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/NotSubscribedException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/NotSubscribedException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/NotSubscribedException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/NotSubscribedException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/NotSubscribedException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/NotSubscribedException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/NotSubscribedException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/NotSubscribedException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/NotSubscribedException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/NotSubscribedException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/NotSubscribedException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/NotSubscribedException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/NotSubscribedException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/NotSubscribedException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/NotSubscribedException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/NotSubscribedException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/NotSubscribedException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/NotSubscribedException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/NotSubscribedException.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerRecord", "shortDescription" : "ProducerRecord represents a record which can be producedto Kafka.", "object" : "fs2\/kafka\/ProducerRecord$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerRecord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerRecord.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerRecord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerRecord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerRecord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerRecord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerRecord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerRecord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerRecord.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerRecord.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerRecord.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerRecord.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerRecord.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerRecord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerRecord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerRecord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withHeaders", "tail" : "(headers: Headers): ProducerRecord[K, V]", "member" : "fs2.kafka.ProducerRecord.withHeaders", "link" : "fs2\/kafka\/ProducerRecord.html#withHeaders(headers:fs2.kafka.Headers):fs2.kafka.ProducerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withTimestamp", "tail" : "(timestamp: Long): ProducerRecord[K, V]", "member" : "fs2.kafka.ProducerRecord.withTimestamp", "link" : "fs2\/kafka\/ProducerRecord.html#withTimestamp(timestamp:Long):fs2.kafka.ProducerRecord[K,V]", "kind" : "abstract def"}, {"label" : "withPartition", "tail" : "(partition: Int): ProducerRecord[K, V]", "member" : "fs2.kafka.ProducerRecord.withPartition", "link" : "fs2\/kafka\/ProducerRecord.html#withPartition(partition:Int):fs2.kafka.ProducerRecord[K,V]", "kind" : "abstract def"}, {"label" : "headers", "tail" : "(): Headers", "member" : "fs2.kafka.ProducerRecord.headers", "link" : "fs2\/kafka\/ProducerRecord.html#headers:fs2.kafka.Headers", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): V", "member" : "fs2.kafka.ProducerRecord.value", "link" : "fs2\/kafka\/ProducerRecord.html#value:V", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): K", "member" : "fs2.kafka.ProducerRecord.key", "link" : "fs2\/kafka\/ProducerRecord.html#key:K", "kind" : "abstract def"}, {"label" : "timestamp", "tail" : "(): Option[Long]", "member" : "fs2.kafka.ProducerRecord.timestamp", "link" : "fs2\/kafka\/ProducerRecord.html#timestamp:Option[Long]", "kind" : "abstract def"}, {"label" : "partition", "tail" : "(): Option[Int]", "member" : "fs2.kafka.ProducerRecord.partition", "link" : "fs2\/kafka\/ProducerRecord.html#partition:Option[Int]", "kind" : "abstract def"}, {"label" : "topic", "tail" : "(): String", "member" : "fs2.kafka.ProducerRecord.topic", "link" : "fs2\/kafka\/ProducerRecord.html#topic:String", "kind" : "abstract def"}], "members_object" : [{"label" : "producerRecordShow", "tail" : "(K: Show[K], V: Show[V]): Show[ProducerRecord[K, V]]", "member" : "fs2.kafka.ProducerRecord.producerRecordShow", "link" : "fs2\/kafka\/ProducerRecord$.html#producerRecordShow[K,V](implicitK:cats.Show[K],implicitV:cats.Show[V]):cats.Show[fs2.kafka.ProducerRecord[K,V]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(topic: String, key: K, value: V): ProducerRecord[K, V]", "member" : "fs2.kafka.ProducerRecord.apply", "link" : "fs2\/kafka\/ProducerRecord$.html#apply[K,V](topic:String,key:K,value:V):fs2.kafka.ProducerRecord[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerRecord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerRecord$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerRecord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerRecord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerRecord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerRecord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerRecord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecord$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerRecord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerRecord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerRecord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerRecord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerRecord$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerRecord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerRecord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerRecord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerRecord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerRecord.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerRecords", "shortDescription" : "ProducerRecords represents zero or more ProducerRecords,together with an arbitrary passthrough value, all of which canbe used with KafkaProducer.", "object" : "fs2\/kafka\/ProducerRecords$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerRecords.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerRecords.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerRecords.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerRecords.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerRecords.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerRecords.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerRecords.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerRecords.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerRecords.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerRecords.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerRecords.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerRecords.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerRecords.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerRecords.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerRecords.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerRecords.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "passthrough", "tail" : "(): P", "member" : "fs2.kafka.ProducerRecords.passthrough", "link" : "fs2\/kafka\/ProducerRecords.html#passthrough:P", "kind" : "abstract def"}, {"label" : "records", "tail" : "(): Chunk[ProducerRecord[K, V]]", "member" : "fs2.kafka.ProducerRecords.records", "link" : "fs2\/kafka\/ProducerRecords.html#records:fs2.Chunk[fs2.kafka.ProducerRecord[K,V]]", "kind" : "abstract def"}], "members_object" : [{"label" : "producerRecordsShow", "tail" : "(K: Show[K], V: Show[V], P: Show[P]): Show[ProducerRecords[K, V, P]]", "member" : "fs2.kafka.ProducerRecords.producerRecordsShow", "link" : "fs2\/kafka\/ProducerRecords$.html#producerRecordsShow[K,V,P](implicitK:cats.Show[K],implicitV:cats.Show[V],implicitP:cats.Show[P]):cats.Show[fs2.kafka.ProducerRecords[K,V,P]]", "kind" : "implicit def"}, {"label" : "one", "tail" : "(record: ProducerRecord[K, V], passthrough: P): ProducerRecords[K, V, P]", "member" : "fs2.kafka.ProducerRecords.one", "link" : "fs2\/kafka\/ProducerRecords$.html#one[K,V,P](record:fs2.kafka.ProducerRecord[K,V],passthrough:P):fs2.kafka.ProducerRecords[K,V,P]", "kind" : "def"}, {"label" : "one", "tail" : "(record: ProducerRecord[K, V]): ProducerRecords[K, V, Unit]", "member" : "fs2.kafka.ProducerRecords.one", "link" : "fs2\/kafka\/ProducerRecords$.html#one[K,V](record:fs2.kafka.ProducerRecord[K,V]):fs2.kafka.ProducerRecords[K,V,Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(records: F[ProducerRecord[K, V]], passthrough: P)(F: Traverse[F]): ProducerRecords[K, V, P]", "member" : "fs2.kafka.ProducerRecords.apply", "link" : "fs2\/kafka\/ProducerRecords$.html#apply[F[+_],K,V,P](records:F[fs2.kafka.ProducerRecord[K,V]],passthrough:P)(implicitF:cats.Traverse[F]):fs2.kafka.ProducerRecords[K,V,P]", "kind" : "def"}, {"label" : "apply", "tail" : "(records: F[ProducerRecord[K, V]])(F: Traverse[F]): ProducerRecords[K, V, Unit]", "member" : "fs2.kafka.ProducerRecords.apply", "link" : "fs2\/kafka\/ProducerRecords$.html#apply[F[+_],K,V](records:F[fs2.kafka.ProducerRecord[K,V]])(implicitF:cats.Traverse[F]):fs2.kafka.ProducerRecords[K,V,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerRecords$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerRecords$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerRecords$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerRecords$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerRecords$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerRecords$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerRecords$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerRecords$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerRecords$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerRecords$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerRecords$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerRecords$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerRecords$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerRecords$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerRecords$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerRecords$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerRecords$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerRecords.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerResource", "shortDescription" : "ProducerResource provides support for inferring the key and valuetype from ProducerSettings when using producerResource with thefollowing syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.ProducerResource.toString", "link" : "fs2\/kafka\/ProducerResource.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: ProducerSettings[F, K, V])(context: ContextShift[F]): Resource[F, Metrics[F, K, V]]", "member" : "fs2.kafka.ProducerResource.using", "link" : "fs2\/kafka\/ProducerResource.html#using[K,V](settings:fs2.kafka.ProducerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F]):cats.effect.Resource[F,fs2.kafka.KafkaProducer.Metrics[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/ProducerResource.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/ProducerResource.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/ProducerResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/ProducerResource.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerResource.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerResult", "shortDescription" : "ProducerResult represents the result of having produced zeroor more ProducerRecords from a ProducerRecords.", "object" : "fs2\/kafka\/ProducerResult$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "passthrough", "tail" : "(): P", "member" : "fs2.kafka.ProducerResult.passthrough", "link" : "fs2\/kafka\/ProducerResult.html#passthrough:P", "kind" : "abstract def"}, {"label" : "records", "tail" : "(): Chunk[(ProducerRecord[K, V], RecordMetadata)]", "member" : "fs2.kafka.ProducerResult.records", "link" : "fs2\/kafka\/ProducerResult.html#records:fs2.Chunk[(fs2.kafka.ProducerRecord[K,V],org.apache.kafka.clients.producer.RecordMetadata)]", "kind" : "abstract def"}], "members_object" : [{"label" : "producerResultShow", "tail" : "(K: Show[K], V: Show[V], P: Show[P]): Show[ProducerResult[K, V, P]]", "member" : "fs2.kafka.ProducerResult.producerResultShow", "link" : "fs2\/kafka\/ProducerResult$.html#producerResultShow[K,V,P](implicitK:cats.Show[K],implicitV:cats.Show[V],implicitP:cats.Show[P]):cats.Show[fs2.kafka.ProducerResult[K,V,P]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(records: Chunk[(ProducerRecord[K, V], RecordMetadata)], passthrough: P): ProducerResult[K, V, P]", "member" : "fs2.kafka.ProducerResult.apply", "link" : "fs2\/kafka\/ProducerResult$.html#apply[K,V,P](records:fs2.Chunk[(fs2.kafka.ProducerRecord[K,V],org.apache.kafka.clients.producer.RecordMetadata)],passthrough:P):fs2.kafka.ProducerResult[K,V,P]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerResult.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerSettings", "shortDescription" : "ProducerSettings contain settings necessary to create a KafkaProducer.", "object" : "fs2\/kafka\/ProducerSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withCreateProducer", "tail" : "(createProducer: (Map[String, String]) => F[KafkaByteProducer]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withCreateProducer", "link" : "fs2\/kafka\/ProducerSettings.html#withCreateProducer(createProducer:Map[String,String]=>F[fs2.kafka.KafkaByteProducer]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "createProducer", "tail" : "(): F[KafkaByteProducer]", "member" : "fs2.kafka.ProducerSettings.createProducer", "link" : "fs2\/kafka\/ProducerSettings.html#createProducer:F[fs2.kafka.KafkaByteProducer]", "kind" : "abstract def"}, {"label" : "withParallelism", "tail" : "(parallelism: Int): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withParallelism", "link" : "fs2\/kafka\/ProducerSettings.html#withParallelism(parallelism:Int):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "parallelism", "tail" : "(): Int", "member" : "fs2.kafka.ProducerSettings.parallelism", "link" : "fs2\/kafka\/ProducerSettings.html#parallelism:Int", "kind" : "abstract def"}, {"label" : "withCloseTimeout", "tail" : "(closeTimeout: FiniteDuration): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withCloseTimeout", "link" : "fs2\/kafka\/ProducerSettings.html#withCloseTimeout(closeTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "closeTimeout", "tail" : "(): FiniteDuration", "member" : "fs2.kafka.ProducerSettings.closeTimeout", "link" : "fs2\/kafka\/ProducerSettings.html#closeTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: Map[String, String]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withProperties", "link" : "fs2\/kafka\/ProducerSettings.html#withProperties(properties:Map[String,String]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: (String, String)*): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withProperties", "link" : "fs2\/kafka\/ProducerSettings.html#withProperties(properties:(String,String)*):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withProperty", "tail" : "(key: String, value: String): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withProperty", "link" : "fs2\/kafka\/ProducerSettings.html#withProperty(key:String,value:String):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withDeliveryTimeout", "tail" : "(deliveryTimeout: FiniteDuration): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withDeliveryTimeout", "link" : "fs2\/kafka\/ProducerSettings.html#withDeliveryTimeout(deliveryTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withRequestTimeout", "tail" : "(requestTimeout: FiniteDuration): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withRequestTimeout", "link" : "fs2\/kafka\/ProducerSettings.html#withRequestTimeout(requestTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withLinger", "tail" : "(linger: FiniteDuration): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withLinger", "link" : "fs2\/kafka\/ProducerSettings.html#withLinger(linger:scala.concurrent.duration.FiniteDuration):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withEnableIdempotence", "tail" : "(enableIdempotence: Boolean): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withEnableIdempotence", "link" : "fs2\/kafka\/ProducerSettings.html#withEnableIdempotence(enableIdempotence:Boolean):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withMaxInFlightRequestsPerConnection", "tail" : "(maxInFlightRequestsPerConnection: Int): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withMaxInFlightRequestsPerConnection", "link" : "fs2\/kafka\/ProducerSettings.html#withMaxInFlightRequestsPerConnection(maxInFlightRequestsPerConnection:Int):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withRetries", "tail" : "(retries: Int): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withRetries", "link" : "fs2\/kafka\/ProducerSettings.html#withRetries(retries:Int):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withClientId", "tail" : "(clientId: String): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withClientId", "link" : "fs2\/kafka\/ProducerSettings.html#withClientId(clientId:String):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withBatchSize", "tail" : "(batchSize: Int): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withBatchSize", "link" : "fs2\/kafka\/ProducerSettings.html#withBatchSize(batchSize:Int):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withAcks", "tail" : "(acks: Acks): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withAcks", "link" : "fs2\/kafka\/ProducerSettings.html#withAcks(acks:fs2.kafka.Acks):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "withBootstrapServers", "tail" : "(bootstrapServers: String): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withBootstrapServers", "link" : "fs2\/kafka\/ProducerSettings.html#withBootstrapServers(bootstrapServers:String):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "fs2.kafka.ProducerSettings.properties", "link" : "fs2\/kafka\/ProducerSettings.html#properties:Map[String,String]", "kind" : "abstract def"}, {"label" : "withBlocker", "tail" : "(blocker: Blocker): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.withBlocker", "link" : "fs2\/kafka\/ProducerSettings.html#withBlocker(blocker:cats.effect.Blocker):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "blocker", "tail" : "(): Option[Blocker]", "member" : "fs2.kafka.ProducerSettings.blocker", "link" : "fs2\/kafka\/ProducerSettings.html#blocker:Option[cats.effect.Blocker]", "kind" : "abstract def"}, {"label" : "valueSerializer", "tail" : "(): F[Serializer[F, V]]", "member" : "fs2.kafka.ProducerSettings.valueSerializer", "link" : "fs2\/kafka\/ProducerSettings.html#valueSerializer:F[fs2.kafka.Serializer[F,V]]", "kind" : "abstract def"}, {"label" : "keySerializer", "tail" : "(): F[Serializer[F, K]]", "member" : "fs2.kafka.ProducerSettings.keySerializer", "link" : "fs2\/kafka\/ProducerSettings.html#keySerializer:F[fs2.kafka.Serializer[F,K]]", "kind" : "abstract def"}], "members_object" : [{"label" : "producerSettingsShow", "tail" : "(): Show[ProducerSettings[F, K, V]]", "member" : "fs2.kafka.ProducerSettings.producerSettingsShow", "link" : "fs2\/kafka\/ProducerSettings$.html#producerSettingsShow[F[_],K,V]:cats.Show[fs2.kafka.ProducerSettings[F,K,V]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: Sync[F], keySerializer: RecordSerializer[F, K], valueSerializer: RecordSerializer[F, V]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.apply", "link" : "fs2\/kafka\/ProducerSettings$.html#apply[F[_],K,V](implicitF:cats.effect.Sync[F],implicitkeySerializer:fs2.kafka.RecordSerializer[F,K],implicitvalueSerializer:fs2.kafka.RecordSerializer[F,V]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keySerializer: RecordSerializer[F, K], valueSerializer: RecordSerializer[F, V])(F: Sync[F]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.apply", "link" : "fs2\/kafka\/ProducerSettings$.html#apply[F[_],K,V](keySerializer:fs2.kafka.RecordSerializer[F,K],valueSerializer:fs2.kafka.RecordSerializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keySerializer: Serializer[F, K], valueSerializer: RecordSerializer[F, V])(F: Sync[F]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.apply", "link" : "fs2\/kafka\/ProducerSettings$.html#apply[F[_],K,V](keySerializer:fs2.kafka.Serializer[F,K],valueSerializer:fs2.kafka.RecordSerializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keySerializer: RecordSerializer[F, K], valueSerializer: Serializer[F, V])(F: Sync[F]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.apply", "link" : "fs2\/kafka\/ProducerSettings$.html#apply[F[_],K,V](keySerializer:fs2.kafka.RecordSerializer[F,K],valueSerializer:fs2.kafka.Serializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "apply", "tail" : "(keySerializer: Serializer[F, K], valueSerializer: Serializer[F, V])(F: Sync[F]): ProducerSettings[F, K, V]", "member" : "fs2.kafka.ProducerSettings.apply", "link" : "fs2\/kafka\/ProducerSettings$.html#apply[F[_],K,V](keySerializer:fs2.kafka.Serializer[F,K],valueSerializer:fs2.kafka.Serializer[F,V])(implicitF:cats.effect.Sync[F]):fs2.kafka.ProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/ProducerSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/ProducerSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/ProducerSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/ProducerSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/ProducerSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/ProducerSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/ProducerSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/ProducerSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/ProducerSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/ProducerSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/ProducerSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/ProducerSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/ProducerSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/ProducerSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/ProducerSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerSettings.html", "kind" : "class"}, {"name" : "fs2.kafka.ProducerStream", "shortDescription" : "ProducerStream provides support for inferring the key and valuetype from ProducerSettings when using producerStream with thefollowing syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.ProducerStream.toString", "link" : "fs2\/kafka\/ProducerStream.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: ProducerSettings[F, K, V])(context: ContextShift[F]): Stream[F, Metrics[F, K, V]]", "member" : "fs2.kafka.ProducerStream.using", "link" : "fs2\/kafka\/ProducerStream.html#using[K,V](settings:fs2.kafka.ProducerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F]):fs2.Stream[F,fs2.kafka.KafkaProducer.Metrics[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/ProducerStream.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/ProducerStream.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/ProducerStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/ProducerStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/ProducerStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/ProducerStream.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/ProducerStream.html", "kind" : "class"}, {"name" : "fs2.kafka.RecordDeserializer", "shortDescription" : "Deserializer which may vary depending on whether a recordkey or value is being deserialized, and which may requirea creation effect.", "object" : "fs2\/kafka\/RecordDeserializer$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/RecordDeserializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/RecordDeserializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/RecordDeserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/RecordDeserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/RecordDeserializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/RecordDeserializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/RecordDeserializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/RecordDeserializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/RecordDeserializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/RecordDeserializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/RecordDeserializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/RecordDeserializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/RecordDeserializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/RecordDeserializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/RecordDeserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/RecordDeserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forValue", "tail" : "(): F[Deserializer[F, A]]", "member" : "fs2.kafka.RecordDeserializer.forValue", "link" : "fs2\/kafka\/RecordDeserializer.html#forValue:F[fs2.kafka.Deserializer[F,A]]", "kind" : "abstract def"}, {"label" : "forKey", "tail" : "(): F[Deserializer[F, A]]", "member" : "fs2.kafka.RecordDeserializer.forKey", "link" : "fs2\/kafka\/RecordDeserializer.html#forKey:F[fs2.kafka.Deserializer[F,A]]", "kind" : "abstract def"}], "members_object" : [{"label" : "lift", "tail" : "(F: Applicative[F], deserializer: Deserializer[F, A]): RecordDeserializer[F, A]", "member" : "fs2.kafka.RecordDeserializer.lift", "link" : "fs2\/kafka\/RecordDeserializer$.html#lift[F[_],A](implicitF:cats.Applicative[F],implicitdeserializer:fs2.kafka.Deserializer[F,A]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "implicit def"}, {"label" : "lift", "tail" : "(deserializer: => Deserializer[F, A])(F: Applicative[F]): RecordDeserializer[F, A]", "member" : "fs2.kafka.RecordDeserializer.lift", "link" : "fs2\/kafka\/RecordDeserializer$.html#lift[F[_],A](deserializer:=>fs2.kafka.Deserializer[F,A])(implicitF:cats.Applicative[F]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "def"}, {"label" : "instance", "tail" : "(forKey: => F[Deserializer[F, A]], forValue: => F[Deserializer[F, A]]): RecordDeserializer[F, A]", "member" : "fs2.kafka.RecordDeserializer.instance", "link" : "fs2\/kafka\/RecordDeserializer$.html#instance[F[_],A](forKey:=>F[fs2.kafka.Deserializer[F,A]],forValue:=>F[fs2.kafka.Deserializer[F,A]]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "def"}, {"label" : "const", "tail" : "(deserializer: => F[Deserializer[F, A]]): RecordDeserializer[F, A]", "member" : "fs2.kafka.RecordDeserializer.const", "link" : "fs2\/kafka\/RecordDeserializer$.html#const[F[_],A](deserializer:=>F[fs2.kafka.Deserializer[F,A]]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(deserializer: RecordDeserializer[F, A]): RecordDeserializer[F, A]", "member" : "fs2.kafka.RecordDeserializer.apply", "link" : "fs2\/kafka\/RecordDeserializer$.html#apply[F[_],A](implicitdeserializer:fs2.kafka.RecordDeserializer[F,A]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/RecordDeserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/RecordDeserializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/RecordDeserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/RecordDeserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/RecordDeserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/RecordDeserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/RecordDeserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordDeserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/RecordDeserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/RecordDeserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/RecordDeserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/RecordDeserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/RecordDeserializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/RecordDeserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/RecordDeserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/RecordDeserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/RecordDeserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/RecordDeserializer.html", "kind" : "class"}, {"name" : "fs2.kafka.RecordSerializer", "shortDescription" : "Serializer which may vary depending on whether a recordkey or value is being serialized, and which may requirea creation effect.", "object" : "fs2\/kafka\/RecordSerializer$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/RecordSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/RecordSerializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/RecordSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/RecordSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/RecordSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/RecordSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/RecordSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/RecordSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/RecordSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/RecordSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/RecordSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/RecordSerializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/RecordSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/RecordSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/RecordSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/RecordSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forValue", "tail" : "(): F[Serializer[F, A]]", "member" : "fs2.kafka.RecordSerializer.forValue", "link" : "fs2\/kafka\/RecordSerializer.html#forValue:F[fs2.kafka.Serializer[F,A]]", "kind" : "abstract def"}, {"label" : "forKey", "tail" : "(): F[Serializer[F, A]]", "member" : "fs2.kafka.RecordSerializer.forKey", "link" : "fs2\/kafka\/RecordSerializer.html#forKey:F[fs2.kafka.Serializer[F,A]]", "kind" : "abstract def"}], "members_object" : [{"label" : "lift", "tail" : "(F: Applicative[F], serializer: Serializer[F, A]): RecordSerializer[F, A]", "member" : "fs2.kafka.RecordSerializer.lift", "link" : "fs2\/kafka\/RecordSerializer$.html#lift[F[_],A](implicitF:cats.Applicative[F],implicitserializer:fs2.kafka.Serializer[F,A]):fs2.kafka.RecordSerializer[F,A]", "kind" : "implicit def"}, {"label" : "lift", "tail" : "(serializer: => Serializer[F, A])(F: Applicative[F]): RecordSerializer[F, A]", "member" : "fs2.kafka.RecordSerializer.lift", "link" : "fs2\/kafka\/RecordSerializer$.html#lift[F[_],A](serializer:=>fs2.kafka.Serializer[F,A])(implicitF:cats.Applicative[F]):fs2.kafka.RecordSerializer[F,A]", "kind" : "def"}, {"label" : "instance", "tail" : "(forKey: => F[Serializer[F, A]], forValue: => F[Serializer[F, A]]): RecordSerializer[F, A]", "member" : "fs2.kafka.RecordSerializer.instance", "link" : "fs2\/kafka\/RecordSerializer$.html#instance[F[_],A](forKey:=>F[fs2.kafka.Serializer[F,A]],forValue:=>F[fs2.kafka.Serializer[F,A]]):fs2.kafka.RecordSerializer[F,A]", "kind" : "def"}, {"label" : "const", "tail" : "(serializer: => F[Serializer[F, A]]): RecordSerializer[F, A]", "member" : "fs2.kafka.RecordSerializer.const", "link" : "fs2\/kafka\/RecordSerializer$.html#const[F[_],A](serializer:=>F[fs2.kafka.Serializer[F,A]]):fs2.kafka.RecordSerializer[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(serializer: RecordSerializer[F, A]): RecordSerializer[F, A]", "member" : "fs2.kafka.RecordSerializer.apply", "link" : "fs2\/kafka\/RecordSerializer$.html#apply[F[_],A](implicitserializer:fs2.kafka.RecordSerializer[F,A]):fs2.kafka.RecordSerializer[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/RecordSerializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/RecordSerializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/RecordSerializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/RecordSerializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/RecordSerializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/RecordSerializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/RecordSerializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/RecordSerializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/RecordSerializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/RecordSerializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/RecordSerializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/RecordSerializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/RecordSerializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/RecordSerializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/RecordSerializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/RecordSerializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/RecordSerializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/RecordSerializer.html", "kind" : "class"}, {"name" : "fs2.kafka.SerializationException", "shortDescription" : "Exception raised with Serializer#failWith whenserialization was unable to complete successfully.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/SerializationException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/SerializationException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/SerializationException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/SerializationException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/SerializationException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/SerializationException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/SerializationException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/SerializationException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/SerializationException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/SerializationException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/SerializationException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/SerializationException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/SerializationException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/SerializationException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/SerializationException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/SerializationException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/SerializationException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/SerializationException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/SerializationException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/SerializationException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/SerializationException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/SerializationException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/SerializationException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/SerializationException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/SerializationException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/SerializationException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/SerializationException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/SerializationException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/SerializationException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/SerializationException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/SerializationException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/SerializationException.html", "kind" : "class"}, {"name" : "fs2.kafka.Serializer", "shortDescription" : "Functional composable Kafka key- and record serializer withsupport for effect types.", "object" : "fs2\/kafka\/Serializer$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Serializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Serializer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Serializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Serializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Serializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Serializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Serializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Serializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Serializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Serializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Serializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Serializer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Serializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Serializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Serializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Serializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "suspend", "tail" : "(): Serializer[F, A]", "member" : "fs2.kafka.Serializer.suspend", "link" : "fs2\/kafka\/Serializer.html#suspend:fs2.kafka.Serializer[F,A]", "kind" : "abstract def"}, {"label" : "option", "tail" : "(): Serializer[F, Option[A]]", "member" : "fs2.kafka.Serializer.option", "link" : "fs2\/kafka\/Serializer.html#option:fs2.kafka.Serializer[F,Option[A]]", "kind" : "abstract def"}, {"label" : "mapBytes", "tail" : "(f: (Array[Byte]) => Array[Byte]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.mapBytes", "link" : "fs2\/kafka\/Serializer.html#mapBytes(f:Array[Byte]=>Array[Byte]):fs2.kafka.Serializer[F,A]", "kind" : "abstract def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Serializer[F, B]", "member" : "fs2.kafka.Serializer.contramap", "link" : "fs2\/kafka\/Serializer.html#contramap[B](f:B=>A):fs2.kafka.Serializer[F,B]", "kind" : "abstract def"}, {"label" : "serialize", "tail" : "(topic: String, headers: Headers, a: A): F[Array[Byte]]", "member" : "fs2.kafka.Serializer.serialize", "link" : "fs2\/kafka\/Serializer.html#serialize(topic:String,headers:fs2.kafka.Headers,a:A):F[Array[Byte]]", "kind" : "abstract def"}], "members_object" : [{"label" : "uuid", "tail" : "(F: Sync[F]): Serializer[F, UUID]", "member" : "fs2.kafka.Serializer.uuid", "link" : "fs2\/kafka\/Serializer$.html#uuid[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,java.util.UUID]", "kind" : "implicit def"}, {"label" : "unit", "tail" : "(F: Sync[F]): Serializer[F, Unit]", "member" : "fs2.kafka.Serializer.unit", "link" : "fs2\/kafka\/Serializer$.html#unit[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Unit]", "kind" : "implicit def"}, {"label" : "string", "tail" : "(F: Sync[F]): Serializer[F, String]", "member" : "fs2.kafka.Serializer.string", "link" : "fs2\/kafka\/Serializer$.html#string[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,String]", "kind" : "implicit def"}, {"label" : "short", "tail" : "(F: Sync[F]): Serializer[F, Short]", "member" : "fs2.kafka.Serializer.short", "link" : "fs2\/kafka\/Serializer$.html#short[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Short]", "kind" : "implicit def"}, {"label" : "long", "tail" : "(F: Sync[F]): Serializer[F, Long]", "member" : "fs2.kafka.Serializer.long", "link" : "fs2\/kafka\/Serializer$.html#long[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Long]", "kind" : "implicit def"}, {"label" : "int", "tail" : "(F: Sync[F]): Serializer[F, Int]", "member" : "fs2.kafka.Serializer.int", "link" : "fs2\/kafka\/Serializer$.html#int[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Int]", "kind" : "implicit def"}, {"label" : "float", "tail" : "(F: Sync[F]): Serializer[F, Float]", "member" : "fs2.kafka.Serializer.float", "link" : "fs2\/kafka\/Serializer$.html#float[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Float]", "kind" : "implicit def"}, {"label" : "double", "tail" : "(F: Sync[F]): Serializer[F, Double]", "member" : "fs2.kafka.Serializer.double", "link" : "fs2\/kafka\/Serializer$.html#double[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Double]", "kind" : "implicit def"}, {"label" : "contravariant", "tail" : "(): Contravariant[[β$0$]Serializer[F, β$0$]]", "member" : "fs2.kafka.Serializer.contravariant", "link" : "fs2\/kafka\/Serializer$.html#contravariant[F[_]]:cats.Contravariant[[β$0$]fs2.kafka.Serializer[F,β$0$]]", "kind" : "implicit def"}, {"label" : "option", "tail" : "(serializer: Serializer[F, A]): Serializer[F, Option[A]]", "member" : "fs2.kafka.Serializer.option", "link" : "fs2\/kafka\/Serializer$.html#option[F[_],A](implicitserializer:fs2.kafka.Serializer[F,A]):fs2.kafka.Serializer[F,Option[A]]", "kind" : "implicit def"}, {"label" : "identity", "tail" : "(F: Sync[F]): Serializer[F, Array[Byte]]", "member" : "fs2.kafka.Serializer.identity", "link" : "fs2\/kafka\/Serializer$.html#identity[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Array[Byte]]", "kind" : "implicit def"}, {"label" : "uuid", "tail" : "(charset: Charset)(F: Sync[F]): Serializer[F, UUID]", "member" : "fs2.kafka.Serializer.uuid", "link" : "fs2\/kafka\/Serializer$.html#uuid[F[_]](charset:java.nio.charset.Charset)(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,java.util.UUID]", "kind" : "def"}, {"label" : "string", "tail" : "(charset: Charset)(F: Sync[F]): Serializer[F, String]", "member" : "fs2.kafka.Serializer.string", "link" : "fs2\/kafka\/Serializer$.html#string[F[_]](charset:java.nio.charset.Charset)(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,String]", "kind" : "def"}, {"label" : "topic", "tail" : "(f: PartialFunction[String, Serializer[F, A]])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.topic", "link" : "fs2\/kafka\/Serializer$.html#topic[F[_],A](f:PartialFunction[String,fs2.kafka.Serializer[F,A]])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => F[Array[Byte]])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.lift", "link" : "fs2\/kafka\/Serializer$.html#lift[F[_],A](f:A=>F[Array[Byte]])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "instance", "tail" : "(f: (String, Headers, A) => F[Array[Byte]])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.instance", "link" : "fs2\/kafka\/Serializer$.html#instance[F[_],A](f:(String,fs2.kafka.Headers,A)=>F[Array[Byte]])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "headers", "tail" : "(f: (Headers) => Serializer[F, A])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.headers", "link" : "fs2\/kafka\/Serializer$.html#headers[F[_],A](f:fs2.kafka.Headers=>fs2.kafka.Serializer[F,A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.empty", "link" : "fs2\/kafka\/Serializer$.html#empty[F[_],A](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "failWith", "tail" : "(message: String)(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.failWith", "link" : "fs2\/kafka\/Serializer$.html#failWith[F[_],A](message:String)(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: Throwable)(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.fail", "link" : "fs2\/kafka\/Serializer$.html#fail[F[_],A](e:Throwable)(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "delegate", "tail" : "(serializer: KafkaSerializer[A])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.delegate", "link" : "fs2\/kafka\/Serializer$.html#delegate[F[_],A](serializer:fs2.kafka.KafkaSerializer[A])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "const", "tail" : "(bytes: Array[Byte])(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.const", "link" : "fs2\/kafka\/Serializer$.html#const[F[_],A](bytes:Array[Byte])(implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "asNull", "tail" : "(F: Sync[F]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.asNull", "link" : "fs2\/kafka\/Serializer$.html#asNull[F[_],A](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Sync[F]): Serializer[F, Array[Byte]]", "member" : "fs2.kafka.Serializer.apply", "link" : "fs2\/kafka\/Serializer$.html#apply[F[_]](implicitF:cats.effect.Sync[F]):fs2.kafka.Serializer[F,Array[Byte]]", "kind" : "def"}, {"label" : "apply", "tail" : "(serializer: Serializer[F, A]): Serializer[F, A]", "member" : "fs2.kafka.Serializer.apply", "link" : "fs2\/kafka\/Serializer$.html#apply[F[_],A](implicitserializer:fs2.kafka.Serializer[F,A]):fs2.kafka.Serializer[F,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Serializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Serializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Serializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Serializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Serializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Serializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Serializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Serializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Serializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Serializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Serializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Serializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Serializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Serializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Serializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Serializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Serializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Serializer.html", "kind" : "class"}, {"name" : "fs2.kafka.Timestamp", "shortDescription" : "Timestamp is an optional timestamp value representinga createTime, logAppendTime, unknownTime, orno timestamp at all.", "object" : "fs2\/kafka\/Timestamp$.html", "members_class" : [{"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "fs2.kafka.Timestamp.nonEmpty", "link" : "fs2\/kafka\/Timestamp.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Timestamp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Timestamp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Timestamp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Timestamp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Timestamp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Timestamp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Timestamp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Timestamp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Timestamp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Timestamp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Timestamp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Timestamp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Timestamp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Timestamp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Timestamp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Timestamp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "fs2.kafka.Timestamp.isEmpty", "link" : "fs2\/kafka\/Timestamp.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "unknownTime", "tail" : "(): Option[Long]", "member" : "fs2.kafka.Timestamp.unknownTime", "link" : "fs2\/kafka\/Timestamp.html#unknownTime:Option[Long]", "kind" : "abstract def"}, {"label" : "logAppendTime", "tail" : "(): Option[Long]", "member" : "fs2.kafka.Timestamp.logAppendTime", "link" : "fs2\/kafka\/Timestamp.html#logAppendTime:Option[Long]", "kind" : "abstract def"}, {"label" : "createTime", "tail" : "(): Option[Long]", "member" : "fs2.kafka.Timestamp.createTime", "link" : "fs2\/kafka\/Timestamp.html#createTime:Option[Long]", "kind" : "abstract def"}], "members_object" : [{"label" : "timestampShow", "tail" : ": Show[Timestamp]", "member" : "fs2.kafka.Timestamp.timestampShow", "link" : "fs2\/kafka\/Timestamp$.html#timestampShow:cats.Show[fs2.kafka.Timestamp]", "kind" : "implicit val"}, {"label" : "none", "tail" : ": Timestamp", "member" : "fs2.kafka.Timestamp.none", "link" : "fs2\/kafka\/Timestamp$.html#none:fs2.kafka.Timestamp", "kind" : "val"}, {"label" : "unknownTime", "tail" : "(value: Long): Timestamp", "member" : "fs2.kafka.Timestamp.unknownTime", "link" : "fs2\/kafka\/Timestamp$.html#unknownTime(value:Long):fs2.kafka.Timestamp", "kind" : "def"}, {"label" : "logAppendTime", "tail" : "(value: Long): Timestamp", "member" : "fs2.kafka.Timestamp.logAppendTime", "link" : "fs2\/kafka\/Timestamp$.html#logAppendTime(value:Long):fs2.kafka.Timestamp", "kind" : "def"}, {"label" : "createTime", "tail" : "(value: Long): Timestamp", "member" : "fs2.kafka.Timestamp.createTime", "link" : "fs2\/kafka\/Timestamp$.html#createTime(value:Long):fs2.kafka.Timestamp", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/Timestamp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/Timestamp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/Timestamp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/Timestamp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/Timestamp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/Timestamp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/Timestamp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/Timestamp$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/Timestamp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/Timestamp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/Timestamp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/Timestamp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/Timestamp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/Timestamp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/Timestamp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/Timestamp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/Timestamp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/Timestamp.html", "kind" : "class"}, {"name" : "fs2.kafka.TransactionalKafkaProducer", "shortDescription" : "Represents a producer of Kafka records specialized for 'read-process-write'streams, with the ability to atomically produce ProducerRecords and commitcorresponding CommittableOffsets using produce.Records are wrapped in TransactionalProducerRecords which allow anarbitrary passthrough value to be included in the result.", "members_class" : [{"member" : "fs2.kafka.TransactionalKafkaProducer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "produce", "tail" : "(records: TransactionalProducerRecords[F, K, V, P]): F[ProducerResult[K, V, P]]", "member" : "fs2.kafka.TransactionalKafkaProducer.produce", "link" : "fs2\/kafka\/TransactionalKafkaProducer.html#produce[P](records:fs2.kafka.TransactionalProducerRecords[F,K,V,P]):F[fs2.kafka.ProducerResult[K,V,P]]", "kind" : "abstract def"}], "class" : "fs2\/kafka\/TransactionalKafkaProducer.html", "kind" : "class"}, {"name" : "fs2.kafka.TransactionalProducerRecords", "shortDescription" : "Represents zero or more CommittableProducerRecords, together witharbitrary passthrough value, all of which can be used together with aTransactionalKafkaProducer to produce records and commit offsetswithin a single transaction.TransactionalProducerRecordss can be created using one of thefollowing options.- TransactionalProducerRecords#apply to produce zero or more records,commit the offsets, and then emit a ProducerResult with the resultsand specified passthrough value.- TransactionalProducerRecords#one to produce zero or more records,commit exactly one offset, then emit a ProducerResult with theresults and specified passthrough value.", "object" : "fs2\/kafka\/TransactionalProducerRecords$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/TransactionalProducerRecords.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "passthrough", "tail" : "(): P", "member" : "fs2.kafka.TransactionalProducerRecords.passthrough", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#passthrough:P", "kind" : "abstract def"}, {"label" : "records", "tail" : "(): Chunk[CommittableProducerRecords[F, K, V]]", "member" : "fs2.kafka.TransactionalProducerRecords.records", "link" : "fs2\/kafka\/TransactionalProducerRecords.html#records:fs2.Chunk[fs2.kafka.CommittableProducerRecords[F,K,V]]", "kind" : "abstract def"}], "members_object" : [{"label" : "transactionalProducerRecordsShow", "tail" : "(K: Show[K], V: Show[V], P: Show[P]): Show[TransactionalProducerRecords[F, K, V, P]]", "member" : "fs2.kafka.TransactionalProducerRecords.transactionalProducerRecordsShow", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#transactionalProducerRecordsShow[F[_],K,V,P](implicitK:cats.Show[K],implicitV:cats.Show[V],implicitP:cats.Show[P]):cats.Show[fs2.kafka.TransactionalProducerRecords[F,K,V,P]]", "kind" : "implicit def"}, {"label" : "one", "tail" : "(record: CommittableProducerRecords[F, K, V], passthrough: P): TransactionalProducerRecords[F, K, V, P]", "member" : "fs2.kafka.TransactionalProducerRecords.one", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#one[F[_],K,V,P](record:fs2.kafka.CommittableProducerRecords[F,K,V],passthrough:P):fs2.kafka.TransactionalProducerRecords[F,K,V,P]", "kind" : "def"}, {"label" : "one", "tail" : "(record: CommittableProducerRecords[F, K, V]): TransactionalProducerRecords[F, K, V, Unit]", "member" : "fs2.kafka.TransactionalProducerRecords.one", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#one[F[_],K,V](record:fs2.kafka.CommittableProducerRecords[F,K,V]):fs2.kafka.TransactionalProducerRecords[F,K,V,Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(records: Chunk[CommittableProducerRecords[F, K, V]], passthrough: P): TransactionalProducerRecords[F, K, V, P]", "member" : "fs2.kafka.TransactionalProducerRecords.apply", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#apply[F[_],K,V,P](records:fs2.Chunk[fs2.kafka.CommittableProducerRecords[F,K,V]],passthrough:P):fs2.kafka.TransactionalProducerRecords[F,K,V,P]", "kind" : "def"}, {"label" : "apply", "tail" : "(records: Chunk[CommittableProducerRecords[F, K, V]]): TransactionalProducerRecords[F, K, V, Unit]", "member" : "fs2.kafka.TransactionalProducerRecords.apply", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#apply[F[_],K,V](records:fs2.Chunk[fs2.kafka.CommittableProducerRecords[F,K,V]]):fs2.kafka.TransactionalProducerRecords[F,K,V,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerRecords$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/TransactionalProducerRecords.html", "kind" : "class"}, {"name" : "fs2.kafka.TransactionalProducerResource", "shortDescription" : "TransactionalProducerResource provides support for inferringthe key and value type from TransactionalProducerSettingswhen using transactionalProducerResource with the following syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.TransactionalProducerResource.toString", "link" : "fs2\/kafka\/TransactionalProducerResource.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: TransactionalProducerSettings[F, K, V])(context: ContextShift[F]): Resource[F, TransactionalKafkaProducer[F, K, V]]", "member" : "fs2.kafka.TransactionalProducerResource.using", "link" : "fs2\/kafka\/TransactionalProducerResource.html#using[K,V](settings:fs2.kafka.TransactionalProducerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F]):cats.effect.Resource[F,fs2.kafka.TransactionalKafkaProducer[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/TransactionalProducerResource.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/TransactionalProducerResource.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/TransactionalProducerResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/TransactionalProducerResource.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/TransactionalProducerResource.html", "kind" : "class"}, {"name" : "fs2.kafka.TransactionalProducerSettings", "shortDescription" : "TransactionalProducerSettings contain settings necessary to create aTransactionalKafkaProducer.", "object" : "fs2\/kafka\/TransactionalProducerSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/TransactionalProducerSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withTransactionTimeout", "tail" : "(transactionTimeout: FiniteDuration): TransactionalProducerSettings[F, K, V]", "member" : "fs2.kafka.TransactionalProducerSettings.withTransactionTimeout", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#withTransactionTimeout(transactionTimeout:scala.concurrent.duration.FiniteDuration):fs2.kafka.TransactionalProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "producerSettings", "tail" : "(): ProducerSettings[F, K, V]", "member" : "fs2.kafka.TransactionalProducerSettings.producerSettings", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#producerSettings:fs2.kafka.ProducerSettings[F,K,V]", "kind" : "abstract def"}, {"label" : "transactionalId", "tail" : "(): String", "member" : "fs2.kafka.TransactionalProducerSettings.transactionalId", "link" : "fs2\/kafka\/TransactionalProducerSettings.html#transactionalId:String", "kind" : "abstract def"}], "members_object" : [{"label" : "transactionalProducerSettingsShow", "tail" : "(): Show[TransactionalProducerSettings[F, K, V]]", "member" : "fs2.kafka.TransactionalProducerSettings.transactionalProducerSettingsShow", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#transactionalProducerSettingsShow[F[_],K,V]:cats.Show[fs2.kafka.TransactionalProducerSettings[F,K,V]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(transactionalId: String, producerSettings: ProducerSettings[F, K, V]): TransactionalProducerSettings[F, K, V]", "member" : "fs2.kafka.TransactionalProducerSettings.apply", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#apply[F[_],K,V](transactionalId:String,producerSettings:fs2.kafka.ProducerSettings[F,K,V]):fs2.kafka.TransactionalProducerSettings[F,K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/TransactionalProducerSettings.html", "kind" : "class"}, {"name" : "fs2.kafka.TransactionalProducerStream", "shortDescription" : "TransactionalProducerStream provides support for inferringthe key and value type from TransactionalProducerSettingswhen using transactionalProducerStream with the following syntax.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.TransactionalProducerStream.toString", "link" : "fs2\/kafka\/TransactionalProducerStream.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: TransactionalProducerSettings[F, K, V])(context: ContextShift[F]): Stream[F, TransactionalKafkaProducer[F, K, V]]", "member" : "fs2.kafka.TransactionalProducerStream.using", "link" : "fs2\/kafka\/TransactionalProducerStream.html#using[K,V](settings:fs2.kafka.TransactionalProducerSettings[F,K,V])(implicitcontext:cats.effect.ContextShift[F]):fs2.Stream[F,fs2.kafka.TransactionalKafkaProducer[F,K,V]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/TransactionalProducerStream.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/TransactionalProducerStream.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/TransactionalProducerStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/TransactionalProducerStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/TransactionalProducerStream.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/TransactionalProducerStream.html", "kind" : "class"}, {"name" : "fs2.kafka.UnexpectedTopicException", "shortDescription" : "UnexpectedTopicException is raised when serialization ordeserialization occurred for an unexpected topic which isn'tsupported by the Serializer or Deserializer.", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "fs2\/kafka\/UnexpectedTopicException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "fs2\/kafka\/UnexpectedTopicException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "fs2\/kafka\/UnexpectedTopicException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "fs2\/kafka\/UnexpectedTopicException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/UnexpectedTopicException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/UnexpectedTopicException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/UnexpectedTopicException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/UnexpectedTopicException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/UnexpectedTopicException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/UnexpectedTopicException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/UnexpectedTopicException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/UnexpectedTopicException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/UnexpectedTopicException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/UnexpectedTopicException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/UnexpectedTopicException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/UnexpectedTopicException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/UnexpectedTopicException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/UnexpectedTopicException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/UnexpectedTopicException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/UnexpectedTopicException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/UnexpectedTopicException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/UnexpectedTopicException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/UnexpectedTopicException.html", "kind" : "class"}], "fs2.kafka.consumer" : [{"name" : "fs2.kafka.consumer.KafkaAssignment", "trait" : "fs2\/kafka\/consumer\/KafkaAssignment.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "assign", "tail" : "(topic: String): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#assign(topic:String):F[Unit]", "kind" : "abstract def"}, {"label" : "assign", "tail" : "(topic: String, partitions: NonEmptySet[Int]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#assign(topic:String,partitions:cats.data.NonEmptySet[Int]):F[Unit]", "kind" : "abstract def"}, {"label" : "assign", "tail" : "(partitions: NonEmptySet[TopicPartition]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaAssignment.assign", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#assign(partitions:cats.data.NonEmptySet[org.apache.kafka.common.TopicPartition]):F[Unit]", "kind" : "abstract def"}, {"label" : "assignmentStream", "tail" : "(): Stream[F, SortedSet[TopicPartition]]", "member" : "fs2.kafka.consumer.KafkaAssignment.assignmentStream", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#assignmentStream:fs2.Stream[F,scala.collection.immutable.SortedSet[org.apache.kafka.common.TopicPartition]]", "kind" : "abstract def"}, {"label" : "assignment", "tail" : "(): F[SortedSet[TopicPartition]]", "member" : "fs2.kafka.consumer.KafkaAssignment.assignment", "link" : "fs2\/kafka\/consumer\/KafkaAssignment.html#assignment:F[scala.collection.immutable.SortedSet[org.apache.kafka.common.TopicPartition]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaConsume", "trait" : "fs2\/kafka\/consumer\/KafkaConsume.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "partitionsMapStream", "tail" : "(): Stream[F, Map[TopicPartition, Stream[F, CommittableConsumerRecord[F, K, V]]]]", "member" : "fs2.kafka.consumer.KafkaConsume.partitionsMapStream", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#partitionsMapStream:fs2.Stream[F,Map[org.apache.kafka.common.TopicPartition,fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]]]", "kind" : "abstract def"}, {"label" : "partitionedStream", "tail" : "(): Stream[F, Stream[F, CommittableConsumerRecord[F, K, V]]]", "member" : "fs2.kafka.consumer.KafkaConsume.partitionedStream", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#partitionedStream:fs2.Stream[F,fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]]", "kind" : "abstract def"}, {"label" : "stream", "tail" : "(): Stream[F, CommittableConsumerRecord[F, K, V]]", "member" : "fs2.kafka.consumer.KafkaConsume.stream", "link" : "fs2\/kafka\/consumer\/KafkaConsume.html#stream:fs2.Stream[F,fs2.kafka.CommittableConsumerRecord[F,K,V]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaConsumerLifecycle", "trait" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fiber", "tail" : "(): Fiber[F, Unit]", "member" : "fs2.kafka.consumer.KafkaConsumerLifecycle.fiber", "link" : "fs2\/kafka\/consumer\/KafkaConsumerLifecycle.html#fiber:cats.effect.Fiber[F,Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaMetrics", "trait" : "fs2\/kafka\/consumer\/KafkaMetrics.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "metrics", "tail" : "(): F[Map[MetricName, Metric]]", "member" : "fs2.kafka.consumer.KafkaMetrics.metrics", "link" : "fs2\/kafka\/consumer\/KafkaMetrics.html#metrics:F[Map[org.apache.kafka.common.MetricName,org.apache.kafka.common.Metric]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaOffsets", "trait" : "fs2\/kafka\/consumer\/KafkaOffsets.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "position", "tail" : "(partition: TopicPartition, timeout: FiniteDuration): F[Long]", "member" : "fs2.kafka.consumer.KafkaOffsets.position", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#position(partition:org.apache.kafka.common.TopicPartition,timeout:scala.concurrent.duration.FiniteDuration):F[Long]", "kind" : "abstract def"}, {"label" : "position", "tail" : "(partition: TopicPartition): F[Long]", "member" : "fs2.kafka.consumer.KafkaOffsets.position", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#position(partition:org.apache.kafka.common.TopicPartition):F[Long]", "kind" : "abstract def"}, {"label" : "seekToEnd", "tail" : "(partitions: G[TopicPartition])(arg0: Foldable[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToEnd", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#seekToEnd[G[_]](partitions:G[org.apache.kafka.common.TopicPartition])(implicitevidence$2:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "seekToEnd", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToEnd", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#seekToEnd:F[Unit]", "kind" : "abstract def"}, {"label" : "seekToBeginning", "tail" : "(partitions: G[TopicPartition])(arg0: Foldable[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToBeginning", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#seekToBeginning[G[_]](partitions:G[org.apache.kafka.common.TopicPartition])(implicitevidence$1:cats.Foldable[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "seekToBeginning", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seekToBeginning", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#seekToBeginning:F[Unit]", "kind" : "abstract def"}, {"label" : "seek", "tail" : "(partition: TopicPartition, offset: Long): F[Unit]", "member" : "fs2.kafka.consumer.KafkaOffsets.seek", "link" : "fs2\/kafka\/consumer\/KafkaOffsets.html#seek(partition:org.apache.kafka.common.TopicPartition,offset:Long):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaSubscription", "trait" : "fs2\/kafka\/consumer\/KafkaSubscription.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsubscribe", "tail" : "(): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.unsubscribe", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#unsubscribe:F[Unit]", "kind" : "abstract def"}, {"label" : "subscribe", "tail" : "(regex: Regex): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribe", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#subscribe(regex:scala.util.matching.Regex):F[Unit]", "kind" : "abstract def"}, {"label" : "subscribe", "tail" : "(topics: G[String])(arg0: Reducible[G]): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribe", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#subscribe[G[_]](topics:G[String])(implicitevidence$1:cats.Reducible[G]):F[Unit]", "kind" : "abstract def"}, {"label" : "subscribeTo", "tail" : "(firstTopic: String, remainingTopics: String*): F[Unit]", "member" : "fs2.kafka.consumer.KafkaSubscription.subscribeTo", "link" : "fs2\/kafka\/consumer\/KafkaSubscription.html#subscribeTo(firstTopic:String,remainingTopics:String*):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "fs2.kafka.consumer.KafkaTopics", "trait" : "fs2\/kafka\/consumer\/KafkaTopics.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "endOffsets", "tail" : "(partitions: Set[TopicPartition], timeout: FiniteDuration): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.endOffsets", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#endOffsets(partitions:Set[org.apache.kafka.common.TopicPartition],timeout:scala.concurrent.duration.FiniteDuration):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "endOffsets", "tail" : "(partitions: Set[TopicPartition]): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.endOffsets", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#endOffsets(partitions:Set[org.apache.kafka.common.TopicPartition]):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "beginningOffsets", "tail" : "(partitions: Set[TopicPartition], timeout: FiniteDuration): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.beginningOffsets", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#beginningOffsets(partitions:Set[org.apache.kafka.common.TopicPartition],timeout:scala.concurrent.duration.FiniteDuration):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "beginningOffsets", "tail" : "(partitions: Set[TopicPartition]): F[Map[TopicPartition, Long]]", "member" : "fs2.kafka.consumer.KafkaTopics.beginningOffsets", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#beginningOffsets(partitions:Set[org.apache.kafka.common.TopicPartition]):F[Map[org.apache.kafka.common.TopicPartition,Long]]", "kind" : "abstract def"}, {"label" : "partitionsFor", "tail" : "(topic: String, timeout: FiniteDuration): F[List[PartitionInfo]]", "member" : "fs2.kafka.consumer.KafkaTopics.partitionsFor", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#partitionsFor(topic:String,timeout:scala.concurrent.duration.FiniteDuration):F[List[org.apache.kafka.common.PartitionInfo]]", "kind" : "abstract def"}, {"label" : "partitionsFor", "tail" : "(topic: String): F[List[PartitionInfo]]", "member" : "fs2.kafka.consumer.KafkaTopics.partitionsFor", "link" : "fs2\/kafka\/consumer\/KafkaTopics.html#partitionsFor(topic:String):F[List[org.apache.kafka.common.PartitionInfo]]", "kind" : "abstract def"}], "shortDescription" : ""}], "fs2.kafka.vulcan" : [{"name" : "fs2.kafka.vulcan.Auth", "shortDescription" : "The available options for SchemaRegistryClientSettings#withAuth.", "object" : "fs2\/kafka\/vulcan\/Auth$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/Auth.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/Auth.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/Auth.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/Auth.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/Auth.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/Auth.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/Auth.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/Auth.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/Auth.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/Auth.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/Auth.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/Auth.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/Auth.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/Auth.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/Auth.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/Auth.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "None", "tail" : ": Auth", "member" : "fs2.kafka.vulcan.Auth.None", "link" : "fs2\/kafka\/vulcan\/Auth$.html#None:fs2.kafka.vulcan.Auth", "kind" : "val"}, {"label" : "Bearer", "tail" : "(token: String): Auth", "member" : "fs2.kafka.vulcan.Auth.Bearer", "link" : "fs2\/kafka\/vulcan\/Auth$.html#Bearer(token:String):fs2.kafka.vulcan.Auth", "kind" : "def"}, {"label" : "Basic", "tail" : "(username: String, password: String): Auth", "member" : "fs2.kafka.vulcan.Auth.Basic", "link" : "fs2\/kafka\/vulcan\/Auth$.html#Basic(username:String,password:String):fs2.kafka.vulcan.Auth", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/Auth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/Auth$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/Auth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/Auth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/Auth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/Auth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/Auth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/Auth$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/Auth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/Auth$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/Auth$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/Auth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/Auth$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/Auth$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/Auth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/Auth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/Auth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/vulcan\/Auth.html", "kind" : "class"}, {"name" : "fs2.kafka.vulcan.AvroDeserializer", "shortDescription" : "", "object" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.vulcan.AvroDeserializer.toString", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: AvroSettings[F])(F: Sync[F]): RecordDeserializer[F, A]", "member" : "fs2.kafka.vulcan.AvroDeserializer.using", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#using[F[_]](settings:fs2.kafka.vulcan.AvroSettings[F])(implicitF:cats.effect.Sync[F]):fs2.kafka.RecordDeserializer[F,A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(codec: Codec[A]): AvroDeserializer[A]", "member" : "fs2.kafka.vulcan.AvroDeserializer.apply", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#apply[A](implicitcodec:vulcan.Codec[A]):fs2.kafka.vulcan.AvroDeserializer[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroDeserializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/vulcan\/AvroDeserializer.html", "kind" : "class"}, {"name" : "fs2.kafka.vulcan.AvroSerializer", "shortDescription" : "", "object" : "fs2\/kafka\/vulcan\/AvroSerializer$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "fs2.kafka.vulcan.AvroSerializer.toString", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#toString():String", "kind" : "def"}, {"label" : "using", "tail" : "(settings: AvroSettings[F])(F: Sync[F]): RecordSerializer[F, A]", "member" : "fs2.kafka.vulcan.AvroSerializer.using", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#using[F[_]](settings:fs2.kafka.vulcan.AvroSettings[F])(implicitF:cats.effect.Sync[F]):fs2.kafka.RecordSerializer[F,A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "fs2\/kafka\/vulcan\/AvroSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(codec: Codec[A]): AvroSerializer[A]", "member" : "fs2.kafka.vulcan.AvroSerializer.apply", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#apply[A](implicitcodec:vulcan.Codec[A]):fs2.kafka.vulcan.AvroSerializer[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSerializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/vulcan\/AvroSerializer.html", "kind" : "class"}, {"name" : "fs2.kafka.vulcan.AvroSettings", "shortDescription" : "Describes how to create a KafkaAvroDeserializer and aKafkaAvroSerializer and which settings should be used.", "object" : "fs2\/kafka\/vulcan\/AvroSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withCreateAvroSerializer", "tail" : "(createAvroSerializerWith: (F[SchemaRegistryClient], Boolean, Map[String, String]) => F[(KafkaAvroSerializer, SchemaRegistryClient)]): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withCreateAvroSerializer", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withCreateAvroSerializer(createAvroSerializerWith:(F[fs2.kafka.vulcan.SchemaRegistryClient],Boolean,Map[String,String])=>F[(fs2.kafka.vulcan.KafkaAvroSerializer,fs2.kafka.vulcan.SchemaRegistryClient)]):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "withCreateAvroDeserializer", "tail" : "(createAvroDeserializerWith: (F[SchemaRegistryClient], Boolean, Map[String, String]) => F[(KafkaAvroDeserializer, SchemaRegistryClient)]): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withCreateAvroDeserializer", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withCreateAvroDeserializer(createAvroDeserializerWith:(F[fs2.kafka.vulcan.SchemaRegistryClient],Boolean,Map[String,String])=>F[(fs2.kafka.vulcan.KafkaAvroDeserializer,fs2.kafka.vulcan.SchemaRegistryClient)]):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "createAvroSerializer", "tail" : "(isKey: Boolean): F[(KafkaAvroSerializer, SchemaRegistryClient)]", "member" : "fs2.kafka.vulcan.AvroSettings.createAvroSerializer", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#createAvroSerializer(isKey:Boolean):F[(fs2.kafka.vulcan.KafkaAvroSerializer,fs2.kafka.vulcan.SchemaRegistryClient)]", "kind" : "abstract def"}, {"label" : "createAvroDeserializer", "tail" : "(isKey: Boolean): F[(KafkaAvroDeserializer, SchemaRegistryClient)]", "member" : "fs2.kafka.vulcan.AvroSettings.createAvroDeserializer", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#createAvroDeserializer(isKey:Boolean):F[(fs2.kafka.vulcan.KafkaAvroDeserializer,fs2.kafka.vulcan.SchemaRegistryClient)]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: Map[String, String]): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withProperties", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withProperties(properties:Map[String,String]):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: (String, String)*): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withProperties", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withProperties(properties:(String,String)*):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "withProperty", "tail" : "(key: String, value: String): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withProperty", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withProperty(key:String,value:String):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "fs2.kafka.vulcan.AvroSettings.properties", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#properties:Map[String,String]", "kind" : "abstract def"}, {"label" : "withValueSubjectNameStrategy", "tail" : "(valueSubjectNameStrategy: String): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withValueSubjectNameStrategy", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withValueSubjectNameStrategy(valueSubjectNameStrategy:String):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "withKeySubjectNameStrategy", "tail" : "(keySubjectNameStrategy: String): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withKeySubjectNameStrategy", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withKeySubjectNameStrategy(keySubjectNameStrategy:String):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "withAutoRegisterSchemas", "tail" : "(autoRegisterSchemas: Boolean): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.withAutoRegisterSchemas", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#withAutoRegisterSchemas(autoRegisterSchemas:Boolean):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "abstract def"}, {"label" : "schemaRegistryClient", "tail" : "(): F[SchemaRegistryClient]", "member" : "fs2.kafka.vulcan.AvroSettings.schemaRegistryClient", "link" : "fs2\/kafka\/vulcan\/AvroSettings.html#schemaRegistryClient:F[fs2.kafka.vulcan.SchemaRegistryClient]", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(schemaRegistryClient: SchemaRegistryClient)(F: Sync[F]): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.apply", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#apply[F[_]](schemaRegistryClient:fs2.kafka.vulcan.SchemaRegistryClient)(implicitF:cats.effect.Sync[F]):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(schemaRegistryClientSettings: SchemaRegistryClientSettings[F])(F: Sync[F]): AvroSettings[F]", "member" : "fs2.kafka.vulcan.AvroSettings.apply", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#apply[F[_]](schemaRegistryClientSettings:fs2.kafka.vulcan.SchemaRegistryClientSettings[F])(implicitF:cats.effect.Sync[F]):fs2.kafka.vulcan.AvroSettings[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/AvroSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/vulcan\/AvroSettings.html", "kind" : "class"}, {"name" : "fs2.kafka.vulcan.SchemaRegistryClientSettings", "shortDescription" : "Describes how to create a SchemaRegistryClient and whichsettings should be used.", "object" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withCreateSchemaRegistryClient", "tail" : "(createSchemaRegistryClientWith: (String, Int, Map[String, String]) => F[SchemaRegistryClient]): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withCreateSchemaRegistryClient", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withCreateSchemaRegistryClient(createSchemaRegistryClientWith:(String,Int,Map[String,String])=>F[fs2.kafka.vulcan.SchemaRegistryClient]):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "createSchemaRegistryClient", "tail" : "(): F[SchemaRegistryClient]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.createSchemaRegistryClient", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#createSchemaRegistryClient:F[fs2.kafka.vulcan.SchemaRegistryClient]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: Map[String, String]): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withProperties", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withProperties(properties:Map[String,String]):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "withProperties", "tail" : "(properties: (String, String)*): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withProperties", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withProperties(properties:(String,String)*):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "withProperty", "tail" : "(key: String, value: String): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withProperty", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withProperty(key:String,value:String):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.properties", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#properties:Map[String,String]", "kind" : "abstract def"}, {"label" : "withAuth", "tail" : "(auth: Auth): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withAuth", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withAuth(auth:fs2.kafka.vulcan.Auth):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "withMaxCacheSize", "tail" : "(maxCacheSize: Int): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.withMaxCacheSize", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#withMaxCacheSize(maxCacheSize:Int):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "abstract def"}, {"label" : "maxCacheSize", "tail" : "(): Int", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.maxCacheSize", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#maxCacheSize:Int", "kind" : "abstract def"}, {"label" : "baseUrl", "tail" : "(): String", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.baseUrl", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html#baseUrl:String", "kind" : "abstract def"}], "members_object" : [{"label" : "schemaRegistryClientSettingsShow", "tail" : "(): Show[SchemaRegistryClientSettings[F]]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.schemaRegistryClientSettingsShow", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#schemaRegistryClientSettingsShow[F[_]]:cats.Show[fs2.kafka.vulcan.SchemaRegistryClientSettings[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(baseUrl: String)(F: Sync[F]): SchemaRegistryClientSettings[F]", "member" : "fs2.kafka.vulcan.SchemaRegistryClientSettings.apply", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#apply[F[_]](baseUrl:String)(implicitF:cats.effect.Sync[F]):fs2.kafka.vulcan.SchemaRegistryClientSettings[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "fs2\/kafka\/vulcan\/SchemaRegistryClientSettings.html", "kind" : "class"}]};